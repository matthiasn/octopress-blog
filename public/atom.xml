<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthias Nehlsen]]></title>
  <link href="http://matthiasnehlsen.com/atom.xml" rel="self"/>
  <link href="http://matthiasnehlsen.com/"/>
  <updated>2018-03-08T23:48:19+01:00</updated>
  <id>http://matthiasnehlsen.com/</id>
  <author>
    <name><![CDATA[Matthias Nehlsen]]></name>
    <email><![CDATA[matthias.nehlsen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing meo]]></title>
    <link href="http://matthiasnehlsen.com/blog/2018/03/08/introducing-meo/"/>
    <updated>2018-03-08T19:21:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2018/03/08/introducing-meo</id>
    <content type="html"><![CDATA[<p>I would like to dedicate this blog post to my grandma. It&#8217;s her 94th birthday today. Happy birthday, grandma, I love you.</p>

<p>This is the perfect day for introducing <strong><a href="https://github.com/matthiasn/meo">meo</a></strong>, a project that my grandma inspired. About two years ago, she showed me a photo from an Iceland vacation, and I asked her what year that was. She did not remember but retrieved a folder, scanned a few pages, and less than a minute later gave me a report of the details of the trip that she was a part of in May 1987. I was stunned, as it dawned on me that I did not have anything like that for the past 20 years of my life, in which I visited 39 countries. Emails with itineraries, photos with geolocation for a few years back, sure, but all very fragmented, and far from being able to give a concise summary of any of those trips in 60 seconds or less. I told her I wished I had recordings like that, and she said, &#8216;Really? I wish I had recorded more.&#8217;</p>

<!-- more -->


<p>That made a think hard about the problem of getting older and forgetting more and more. I had always wanted a journal, but using paper wasn&#8217;t an option. I cannot even read my own handwriting, or at least find it very unpleasant. Also, paper-based notes have physical weight, plus indexing them sucks. I wanted a digital journal instead, one that runs on both desktop and mobile, and that does not require me to hand my recordings over to interested third parties.</p>

<p>Nope, journals must be (and stay) private. Also, it would have to be an open-source tool so that anyone can check what it does with your data. I have zero reason to take anyone by their word on how they will respect my privacy. Maybe they mean it for today, but through either neglect or change of mind, they will probably still sell or lose my data at some point, especially if it&#8217;s a free service that struggles to find a business model while dealing with increasing infrastructure costs. What if there was an application that does not share your information with anyone? <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> wants to be this project, but first, I would like people smarter than me to review it, and point out where it can be improved and made more secure. That is one of the many areas where I am looking for collaborators.</p>

<p>Meo is an intelligent, data-driven journal. Initially, I just used it for recording text and photos together with the exact whereabouts. But I pretty soon realized that I would not necessarily spend much time on keeping a journal just so that I could benefit in some rather distant future. I knew I would enjoy having more information about my current life in that distant future, but the process of collecting data would also have to be helpful in the now. I always found it to be a waste of data to throw away tasks and their completion, and I also read &#8216;The Effective Executive&#8217; by Peter Drucker at the time. The chapter &#8216;Know Thy Time&#8217; where he suggests recording how you spend your time inspired me in particular. I wanted that, only built into my journal and recording how I spend my time all through the year(s), instead of recording stuff on paper for weeks at a time.</p>

<p>For that, I can now define tasks in <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> and then have a timer running whenever I work on a given task. Each task then belongs to a story, and those, in turn, belong to a few broad sagas, so that I always have a view into how I spend my time, which is quite often different from what I thought. So far I have completed 3305 tasks this way, recording 6779 hours total, which does include sleep, and by just recording the process of being me, I already have a pretty detailed journal. After all, to a large degree, I am what I do. I have heard the counterargument a few times that what someone did in their life was so mundane and boring that it would not be worth recording. Well, in that case, they probably have a much bigger problem. I am trying to spend my time as well as I can, as opposed to trying to get more done. There is not the slightest chance that I will ever get my backlog down to zero, but if I cannot complete all tasks, I will probably fare best by working on the most relevant ones. I have a few ideas on how to come up with a better sort order than by time or some priority, but more about that later when I have a proof of concept for that.</p>

<p>Here is how <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> currently looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/2018-03-08-meo-desktop.png"></p>

<p>On the left side, there is a calendar that shows how I really spent my time, not what was planned. Of course there normally are labels, but I can also switch them off. I feel there should also be some kind of a time assignment when planning a day, but that part does not exist yet. In the next column to the right, there is a list of work in progress, filtered for a particular saga or overall. In the screenshot above, I am only showing the work in progress for meo. Then to the right, there is the selected task, with its comments and the time recorded. Then all the way over to the right, there are linked entries. In this case, there is a linked screenshot. Oh yeah, you can take screenshots in <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> using <strong>⌘-P</strong> and they will be recorded with time, your whereabouts, and whatever comment you might have. All the way to the right, there is such a screenshot, that then also contains time and geolocation of where it was taken. I find screenshots for documenting the progress of programming super useful without taking much extra time, and I&#8217;ve taken a few thousand of those so far. Then later when I come back to a task or project, those screenshots often make it easier to get my mind back into the problem. In a way, that&#8217;s a kind of onboarding, only on a smaller scale.</p>

<p>Then I thought I would like to record additional information about myself, for example, steps per day, flights of stairs climbed, amount of certain vitamins and minerals taken, blood pressure, weight, amounts of coffee, beer, whatever, just to see if it&#8217;s useful. And yeah, some of that really is useful, and why not collect data long as the information stays with me. No, I would not share this kind of information with any cloud-based service. But for my eyes only, why not.</p>

<p>Here&#8217;s how that looks like, with the labels omitted again, because hey, most of that is none of your business:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/2018-03-08-meo-charts.png"></p>

<p>I think it works to have information about my day and the context over the past weeks and months in sight, especially when it&#8217;s for things I can influence, such as steps per day, where I can always decide to go for a walk until I say reach my 10K steps per day goal. In other context, companies pay money for banner ads, so I assume they are proven to work. Only that here, the banner ad, being about myself, is way more relevant</p>

<p>This application is based on Electron and thus platform-independent. I use it on a MacBook all the time and have used it on Linux and Windows in the past, albeit briefly. Those may have broken in the meantime, though. Please check if you can run it yourself by following the steps in the README, and file an issue for whatever comes up. [-> Please help with the multi-platform aspect of this application. Especially also around packaging with electron-builder for those platforms]</p>

<p>A part of my motivation for writing <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> was that it could be an example application for a book I started a few years back about building systems in Clojure. But I soon realized that I could not write a book that could be authoritative about any of this. I was learning so much new stuff all the time. And then it never felt like a good time to take a snapshot and write about it, knowing that it would likely change. And then that was not the only thing I felt bad about, so I thought why not also track my mood, as it seemed to me something was not going well there.</p>

<p>I researched a few psychological instruments for assessing current mood. I&#8217;m by no means an expert on any of that, but what seemed to make sense to me to is the PANAS, an instrument for assessing the momentary affective situation (or so). There are 20 words, for each of which the subject selects a value on a 7-item Likert scale. In the end, it gives you a positive and a negative score. The score probably also means something in comparison to the general population, but for me, it was most interesting to observe changes over time, and I found some patterns in my recorded data that make me unusually well-informed when talking to mental health professionals, including friends in that field.</p>

<p>Here&#8217;s how filling out the PANAS looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/2018-03-08-meo-panas.png"></p>

<p>I found that most questionnaires work in a similar way, with a Likert-type scale, some of the items reversed, and any number of scores derived from filling out the data. Those can now be defined in <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> via configuration as an edn-file, but ideally, there should be a graphical user interface for defining and editing surveys. Pull requests most undoubtedly welcome :)</p>

<p>The data for filled out questionnaires is then plotted against other collected data, as in the screenshot above. I am frequently using other such instruments as well, like the CFQ11 for signs of fatigue, and I will write more about data gathering, questionnaires and charts another time - for today I&#8217;m just giving a quick overview of different parts of the project.</p>

<p>Next, there is a mobile application. Initially, I started with a Swift-based app but that was never complete, and only did very few things, like collecting geo information whenever there was a significant location change, capturing text notes, or uploading photos. It uploaded it&#8217;s data to the <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> desktop application by scanning a QR code, and then sent the data over the local network, but that was never really a good idea. The novelty of scanning that code wore off quickly, and it just got tedious. Also, it would lead to problems in the review process why the app would require either unencrypted traffic or using a self-signed certificate, the latter also being a nuisance in and of itself. And then that app would be iOS only, and my vision is to be multi-platform on both desktop and mobile, not least because I do not want to lock myself in but have the option to move to any platform at any point, without certain applications holding me back with a particular platform.</p>

<p>So I built a mobile app in ClojureScript on top of React Native. At this point, one can record text entries, data from Apple Health, and photos, all of which are then synced one direction to the desktop application, using a user-provided WebDAV folder, and then passes journal entries inside AES-256 encrypted files. Entries on mobile can also be edited, and updates are then synced. Conflicts are detected using a vector clock, which is mostly thanks to Tyler Neely, who provided the theory and guided the implementation. Right now, conflicts are only shown, and there still needs to be a UI for resolving conflicts. Also, syncing should work both ways. And the structure of the code is quite convoluted. This is certainly the most active area of development, and the one where I need the most help.</p>

<p>This is how the app currently looks like:</p>

<p>If you think all this makes sense and believe in the idea that people should be able to record stuff about our lives without any other party eavesdropping in on that, and that a tool for doing so should be open source, then please subscribe to the mailing list so I can keep you updated on the progress.</p>

<p>[mailing list input]</p>

<p>If the above applies, and you also want to learn Clojure and ClojureScript - or know these excellent languages already - I would like to ask you for help in making the existing code base better. Help can happen by reviewing existing code, pointing out weaknesses and repetitiveness, improved test coverage, UI integration tests, and overall code quality improvements, or by solving or helping in solving upcoming problems. Or, if you are a designer and think something like this should exist, only in pretty, I would love to hear your thoughts, or even better, see your SASS magic in a pull request. But also guidance in, &#8216;Hey, this looks terrible, here&#8217;s an idea to make it better&#8217; would be very welcome.</p>

<p>I have built a tool that hopefully helps in onboarding anyone who is interested in collaborating, and it is called inspect. It&#8217;s a tool for looking inside a running application built on top of the systems-toolbox. This is a library I built quite some time ago, with the vision of building something like inspect, but lacking the skills to do so back at the time. Working on <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> and the electron application around it and eventually enabled me to build a first standalone desktop version of inspect. Systems on top of the systems-toolbox have a so called firehose where, when enabled, all message flows are copied to, and persisted, for example on a Kafka topic. Inspect then consumes this Kafka topic and groups message flows together for visualization, and also infers the structure of the system from successful message flows it observed. Here&#8217;s how that looks like for the overall structure of meo:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/2018-03-08-inspect-overview.png"></p>

<p>Here with the communication for a selected message type:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/2018-03-08-inspect-selection.png"></p>

<p>Here&#8217;s a particular flow for taking a screenshot, which involves the main electron process, the renderer process, and the JVM &#8220;backend&#8221; application they talk to.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/2018-03-08-inspect-flow.png"></p>

<p>It looks convoluted because it is, and I have not had the time yet to simplify it yet. But at least there&#8217;s a tool for visualizing the madness, which is something I wish more projects had. I will talk more about this tool in subsequent blog posts. While many areas in the <strong><a href="https://github.com/matthiasn/meo">meo</a></strong> codebase still suck, at least there is visibility like this, and that&#8217;s kinda fun. But there is also plenty room for improvement in inspect, so if that interests you, please help in making this more useful and/or prettier. For example, it would be cool if my coworkers wouldn&#8217;t always make fun of me that my laptop was about to take off when I use inspect. The system that upon inspection makes my laptop fans max out processes a lot more data and runs on more than ten nodes, but I think that nonetheless there are better solutions that won&#8217;t max out the render process in Electron. Another area where fresh sets of eyes would be helpful.</p>

<p>I&#8217;m delighted that my grandma is still around to see this article about what she inspired finally published. It also helped me finally coming to terms with the idea of talking about this project. It&#8217;s probably true what Reid Hoffmann said, &#8216;If you are not embarrassed by the first version of your product, you&#8217;ve launched too late.&#8217; And I&#8217;m still fairly embarrassed, and without grandma&#8217;s birthday, I probably would have tried to keep polishing doorknobs until the end of time, so thanks for that, too, dear grandma.</p>

<p>I can let you know when the public beta starts by signing up to the mailing list. Anyone interested can build the application themselves. I can also provide a select few with a packaged version already. For that, you can send me an email, and please let me know what area you are particularly interested in, so I can launch to different interest groups at different times, depending on progress in that area.</p>

<p>Thanks for reading this far. Let me know if you have any questions or comments. And subscribe if you want to read more like this in the future.</p>

<!-- Begin MailChimp Signup Form -->


<p><link href="http://matthiasnehlsen.com//cdn-images.mailchimp.com/embedcode/slim-10_7.css" rel="stylesheet" type="text/css"></p>



<div id="mc_embed_signup">
<form action="https://matthiasnehlsen.us7.list-manage.com/subscribe/post?u=798fd7b50a1d9cc58be41c2af&amp;id=eb7a7193c5" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div id="mc_embed_signup_scroll">
    
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_798fd7b50a1d9cc58be41c2af_eb7a7193c5" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
    </div>
</form>
</div>




<!--End mc_embed_signup-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SystemD and Clojure]]></title>
    <link href="http://matthiasnehlsen.com/blog/2016/08/04/systemd-and-clojure/"/>
    <updated>2016-08-04T19:11:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2016/08/04/systemd-and-clojure</id>
    <content type="html"><![CDATA[<p>Oh hey, I&#8217;m back. Been a while. Today, I want to share with you how I&#8217;m using <strong><a href="https://en.wikipedia.org/wiki/Systemd">systemd</a></strong> to start my Clojure applications on <strong><a href="http://matthiasnehlsen.com">matthiasnehlsen.com</a></strong>, and keep them alive, in case anything should go wrong. These are the applications managed this way:</p>

<ul>
<li><strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong>, an application for tweet stream analysis, see on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong></li>
<li><strong><a href="http://redux-style.matthiasnehlsen.com/">redux-counter example</a></strong>, a sample application for my Clojure <strong><a href="https://leanpub.com/building-a-system-in-clojure">book</a></strong></li>
<li><strong><a href="http://systems-toolbox.matthiasnehlsen.com/">trailing mouse pointer example</a></strong>, another sample application for the book</li>
<li><strong><a href="http://inspect.matthiasnehlsen.com/">inspect</a></strong>, a demo for my <strong><a href="https://github.com/matthiasn/inspect">inspect library</a></strong>. This is will soon be replaced by a new version making sense of messages passed around in <strong><a href="https://github.com/matthiasn/systems-toolbox">systems-toolbox</a></strong> applications.</li>
</ul>


<!-- more -->


<p>Also, I&#8217;m using systemd to start up <strong><a href="http://sse-chat.matthiasnehlsen.com/">sse-chat</a></strong>, a <strong><a href="">Scala</a></strong> demo application which you can also find on <strong><a href="https://github.com/matthiasn/sse-chat">GitHub</a></strong>. However, this application is only started by systemd, but not restarted when anything goes wrong.</p>

<p>The background for this post is that I recently ordered a new <strong><a href="http://ark.intel.com/products/codename/37572/Skylake#@All">Skylake Intel® Xeon® E3-1275 v5</a></strong> based server at <strong><a href="https://www.hetzner.de/en/">Hetzner</a></strong>, and I felt it was finally time to retire the manual process startup approach I had used before. Servers should be updated as often as possible, but who does that often enough when it takes 10-15 minutes to wait for a reboot and then manually restart the processes? Certainly not me. So instead, all process startup should be automatic. Initially, I considered using <strong><a href="https://www.docker.com/">Docker</a></strong>, but regarding monitoring that the application is alive, and restarting it if not, systemd has the better story to offer. Also, I wasted way too much time on a Docker environment in my last client project, so I&#8217;m a little cured of the snake oil.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>So what I wanted was restarting the machine and have all services come up automatically. Also, I wanted to use the <strong>watchdog</strong> functionality, which expects the monitored applications to call systemd with a <strong>heartbeat</strong> message and restarts the application if that heartbeat wasn&#8217;t encountered for say 20 seconds or whatever else you define there. You can read all about this mechanism in this <strong><a href="http://0pointer.de/blog/projects/watchdog.html">blog post</a></strong> by one of the original authors of systemd.</p>

<p>While my applications were running rock solid for months in a row until I finally managed to update the server and restart it, it is certainly appealing from an operations perspective to have a mechanism in place that listens for a heartbeat and restarts a process when the heartbeat does not come as expected. So I thought this might be a good opportunity to write a small library that takes care of emitting said heartbeat when an application is monitored by systemd. You can find this library on GitHub <strong><a href="https://github.com/matthiasn/systemd-watchdog">here</a></strong>.</p>

<p>This library also happens to be a sweet opportunity to write a minimal <strong><a href="https://github.com/matthiasn/systems-toolbox">systems-toolbox</a></strong> system, with a scheduler component that emits messages every so often, and then calls systemd via <strong><a href="https://github.com/java-native-access/jna">JNA</a></strong>.</p>

<p>This is the entire library:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">matthiasn.systemd-watchdog.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">matthiasn.systems-toolbox.switchboard</span> <span class="ss">:as</span> <span class="nv">sb</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">matthiasn.systems-toolbox.scheduler</span> <span class="ss">:as</span> <span class="nv">sched</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">info.faljse.SDNotify</span> <span class="nv">SDNotify</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">start-watchdog!</span>
</span><span class='line'>  <span class="s">&quot;Call systemd&#39;s watchdog every so many milliseconds.</span>
</span><span class='line'><span class="s">   Requires the NOTIFY_SOCKET environment variable to be set, otherwise does</span>
</span><span class='line'><span class="s">   nothing. Fires up a minimal systems-toolbox system with two components:</span>
</span><span class='line'><span class="s">    * a scheduler component</span>
</span><span class='line'><span class="s">    * a component notifying systemd.</span>
</span><span class='line'><span class="s">   Then, the scheduler will emit messages every so often, and upon receiving,</span>
</span><span class='line'><span class="s">   the notifying component will call the sendWatchdog function.</span>
</span><span class='line'><span class="s">   Takes the timeout in milliseconds.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">timeout</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">get </span><span class="p">(</span><span class="nf">System/getenv</span><span class="p">)</span> <span class="s">&quot;NOTIFY_SOCKET&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sb/send-mult-cmd</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">sb/component</span> <span class="ss">:wd/switchboard</span><span class="p">)</span>
</span><span class='line'>      <span class="p">[[</span><span class="ss">:cmd/init-comp</span> <span class="p">(</span><span class="nf">sched/cmp-map</span> <span class="ss">:wd/scheduler-cmp</span><span class="p">)]</span>
</span><span class='line'>       <span class="p">[</span><span class="ss">:cmd/init-comp</span>
</span><span class='line'>        <span class="p">{</span><span class="ss">:cmp-id</span>      <span class="ss">:wd/notify-cmp</span>
</span><span class='line'>         <span class="ss">:handler-map</span> <span class="p">{</span><span class="ss">:wd/send</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="p">(</span><span class="nf">SDNotify/sendWatchdog</span><span class="p">))}}]</span>
</span><span class='line'>       <span class="p">[</span><span class="ss">:cmd/send</span> <span class="p">{</span><span class="ss">:to</span>  <span class="ss">:wd/scheduler-cmp</span>
</span><span class='line'>                   <span class="ss">:msg</span> <span class="p">[</span><span class="ss">:cmd/schedule-new</span>
</span><span class='line'>                         <span class="p">{</span><span class="ss">:timeout</span> <span class="nv">timeout</span>
</span><span class='line'>                          <span class="ss">:message</span> <span class="p">[</span><span class="ss">:wd/send</span><span class="p">]</span>
</span><span class='line'>                          <span class="ss">:repeat</span>  <span class="nv">true</span><span class="p">}]}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It fires up a <strong>switchboard</strong>, which manages and wires systems, the <code>:wd/notify-cmp</code>, which calls <code>(SDNotify/sendWatchdog)</code> from the <strong><a href="https://github.com/faljse/SDNotify">SDNotify library</a></strong>, and a scheduler component, which emits <code>:wd/send</code> messages every <code>timeout</code> milliseconds. You can build much more complex applications with the <strong>systems-toolbox</strong>, e.g. <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong>. The 14 lines above (plus comments and imports) however are about the minimum case when some scheduling is desired.</p>

<p>You can have a look at the mentioned examples if you&#8217;re interested in building systems with the systems-toolbox. In subsequent articles, I will introduce them in detail. For now, you can just use the library in your projects if you want to have your application monitored by systemd. It&#8217;s just a one-liner, as you can see for example in the <strong><a href="https://github.com/matthiasn/systems-toolbox/blob/master/examples/trailing-mouse-pointer/src/clj/example/core.clj#L41">trailing mouse pointer example</a></strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">wd/start-watchdog!</span> <span class="mi">5000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple command calls systemd every 5 seconds, but only if the <code>NOTIFY_SOCKET</code> environment variable is set, which would only be the case if systemd had started the application.</p>

<p>Here&#8217;s the service configuration:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[Unit]
</span><span class='line'>Description=systems-toolbox websocket latency visualization example
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=simple
</span><span class='line'>User=bw
</span><span class='line'>Group=bw
</span><span class='line'>Environment=PORT=8010
</span><span class='line'>Environment=HOST=0.0.0.0
</span><span class='line'>WorkingDirectory=/home/bw/run
</span><span class='line'>ExecStart=/usr/bin/java -jar /home/bw/bin/trailing-mouse-pointer.jar
</span><span class='line'>WatchdogSec=20s
</span><span class='line'>Restart=on-failure
</span><span class='line'>
</span><span class='line'># Give a reasonable amount of time for the server to start up/shut down
</span><span class='line'>TimeoutSec=300
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>You can find all the service configurations for my server in my **<a href="https://github.com/matthiasn/conf">conf</a> project, together with some install scripts which allow me to set up a new server with little effort. I hope this helps you in your deployments. It certainly helps me with mine.</p>

<p>Would you like to know when there&#8217;s a new article? Subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> and I&#8217;ll let you know.</p>

<p>Cheers,
Matthias</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>There, the problem was that silly Docker service that frequently hung, which, for whatever reason, required a <strong>REBOOT</strong> of the whole machine. As you can imagine, this was very annoying, as that, of course, meant ALL services would become unavailable until the machine was back up.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Systems Toolbox Example]]></title>
    <link href="http://matthiasnehlsen.com/blog/2015/04/24/systems-toolbox-example/"/>
    <updated>2015-04-24T16:05:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2015/04/24/systems-toolbox-example</id>
    <content type="html"><![CDATA[<p>Today, I have another sample application for the <strong><a href="https://github.com/matthiasn/systems-toolbox">systems-toolbox</a></strong> library for you. This application measures roundtrip times of a WebSockets connection. Before I delve into the reasoning behind this library, here&#8217;s a little teaser of how that&#8217;ll look like:</p>

<p><a href="http://systems-toolbox.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/sys-tb-tmp_local.gif" /></a></p>

<p>I wrote all of this from scratch in Clojure and ClojureScript, including the histogram - no charting libraries required. There&#8217;s a live version, try it out by clicking on the animated GIF.</p>

<!-- more -->


<h2>Systems Toolbox - Rationale</h2>

<p>I started writing this library for two equally important reasons. First, I was beyond tired of writing boilerplate for every system I was building, so I wanted a simpler way of composing systems with as little coupling as possible (including UI). Second of all, I want and need better ways of <strong>observing systems</strong>.</p>

<p>Have you ever been in the situation where you came into a new team, asked what the system does and got the response that <strong>it&#8217;s all in the code</strong>? I call <strong><a href="http://www.urbandictionary.com/define.php?term=bullpucky">bullpucky</a></strong>. The behavior of a system lies in the running system, and I can ONLY figure it out by observing this very system in the wild. Everything else is speculation.</p>

<p>Imagine a somewhat similar situation. Let&#8217;s say you&#8217;re interested in a <strong><a href="http://en.wikipedia.org/wiki/Porsche_911">Porsche 911</a></strong>. You are particularly curious how that thing behaves at high speed on the Autobahn. Also, you want to know what the rear of the car does when you push the gas pedal while coming out of a tight curve. So you go to the nearest Porsche dealership and ask the sales representative. And then that guy responds, &#8220;here are the blueprints from the engineering department, it&#8217;s all in there&#8221;. Good sales pitch? Not so much. But worse, it would not even remotely answer your questions.</p>

<p>I&#8217;d much rather have the sales representative say, &#8220;Here are the keys, why don&#8217;t you find out?&#8221;. Taking that vehicle for a spin is observing a beautifully crafted system instead of studying a boring blueprint. Let&#8217;s not <strong>mistake the map for the territory</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>I found that all the systems I had been working on previously lacked in this department. Observability was usually an ugly afterthought; something tugged on, and that often even had to be removed eventually. Think about all these log statements that are removed from the code later on. If there ever was value in observing data flowing through the system in a particular line of code, there will potentially be value in doing so again later on, in a system running in production.</p>

<p>My initial approach was observing data structures as they flow through a system, for which I built the <strong><a href="https://github.com/matthiasn/inspect">inspect</a></strong> library. But that didn&#8217;t go far enough as it still required log-like statements. Why would I need those?</p>

<p>Let&#8217;s say a system consisted of subsystems that communicate with each other in defined ways. Then, a library for composing message flows could intercept each of those messages as desired without any additional line of code required. Also, timing of everything going on in the system could and should be a first-class citizen, without having to add some annoying log statements (and then remove those later on).</p>

<p>The question for me here was if it is possible to come up with a model for subsystems of an application that together form a larger system, which communicate with each other, and which are fully observable.</p>

<p>Here&#8217;s a drawing of what I have in mind:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/system.png" title="'Subsystem'" ></p>

<p>There are two inputs and two outputs to each such subsystem. These are <strong><a href="https://github.com/clojure/core.async">core.async channels</a></strong>. One input and one output work as expected whereas the other is for publishing snapshots of the state of the subsystem. This channel uses a sliding buffer, so only the latest version of the snapshot is ever kept for further processing, should the system still be busy with processing a previous version of such snapshot. Then there&#8217;s another input for processing such state snapshots, e.g. when another component renders such state snapshot into a user interface.</p>

<p>These subsystems can then be composed into larger systems, as we shall see below. There&#8217;s also more to be written about this library soon, but for now let&#8217;s go back to the sample application.</p>

<h2>Back to the Example Application</h2>

<p>The first application I completely rewrote so that it&#8217;s using the systems-toolbox library both on client and server (in Clojure and ClojureScript) is my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>  application. However, that one is slightly more complex than what I would want to handle inside a blog post. <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>So what does this new and simple sample do? I wanted to know how fast a WebSockets connection is. How long does it take to send a very short message to a server and return the message right away while only adding a key and not doing complicated processing? Sort of like a ping, only with a graphical representation. Then I thought, why not use two circles for that, where one is drawn immediately in the UI from local mouse move events and the other one from the returned message. The longer it takes to send a message to the server and back, the further the second circle will trail behind in the UI. An <strong>animated GIF</strong> shows this better than words:</p>

<p><a href="http://systems-toolbox.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/sys-tb-tmp_local_half.gif" /></a></p>

<p>Above, we have a fast (local) connection where the majority of the network roundtrips take less than 40ms. Now, usually, I have difficulties imagining what 40ms mean in practice, but I think the two circles demonstrate that the second circle hardly trails behind at all. However, there is likely still room for improvement, considering that the fastest roundtrip in the sample of 455 roundtrips only took 3ms.</p>

<p>Now how can we make the data more useful for finding where the holdups happen? In this sample, we have <strong>26ms mean</strong>, <strong>89ms maximum</strong> and <strong>3ms minimum</strong>. What shall we compute next? Maybe a standard deviation? Think again. The standard deviation only makes sense when we have a Gaussian, bell-shaped normal distribution, and we don&#8217;t know that from the sample, do we?</p>

<p>Let&#8217;s have a look at the distribution of the sample. A <strong><a href="http://en.wikipedia.org/wiki/Histogram">histogram</a></strong> seems like an appropriate visual representation of the distribution of values, so let&#8217;s draw one <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>:</p>

<p><a href="http://systems-toolbox.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/sys-tb-tmp_local.gif" /></a></p>

<p>Today, I won&#8217;t discuss how I built the histogram, other than it&#8217;s an embedded SVG drawn from the current data, all written in ClojureScript. The animation of the chart is an emergent property, it results the underlying sample including additonal measurements. The number of bins in this histogram is determined by applying the <strong><a href="http://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule">Freedman–Diaconis rule</a></strong>:</p>

<p>Bin size = 2 IQR(x) n^-1/3 where IQR(x) is the interquartile range of the data, and n is the number of observations in the sample x. This calculation is easy to do in Clojure.</p>

<p>I&#8217;ll probably write another article on the implementation of this application soon. For today, I&#8217;m more interested in the actual behavior that we can observe using the histogram. In the screen capture above, I was connecting locally. Now that&#8217;s an idealized condition that&#8217;s hardly relevant for actual visitors, so I did the same with a connection to my server in southern Germany from Lisbon, where I am right now:</p>

<p><a href="http://systems-toolbox.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/sys-tb-tmp_lisbon.gif" /></a></p>

<p>Still pretty good. Here&#8217;s another attempt from Funchal, Madeira (island somewhere in the Atlantic) earlier today. To create adverse conditions, I used my mobile phone as a hotspot and then used a VPN to Amsterdam to connect to the same server in Germany:</p>

<p><a href="http://systems-toolbox.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/sys-tb-tmp_vpn.gif" /></a></p>

<p>Okay, admittedly, this is substantially slower than the previous connections, but I&#8217;d say that&#8217;s still good enough for most applications. It&#8217;s not that other ways of communicating with the server would be faster here.</p>

<p>In the next article, I will explain the code behind this sample application and also try to make more sense of the data we saw in the histograms. Apparently, our samples don&#8217;t follow a normal distribution but are rather bimodal or double-peaked. I want to explore further why that is the case. If there are two peaks that are roughly 20ms apart, then it seems like there&#8217;s something taking an extra 20ms in some of the roundtrips and not in others. If you have any ideas what that could be, please let me know.</p>

<p>Also, I&#8217;d like to see additional data from other places in the world. Can you do me a favor? Please take a screenshot once you&#8217;ve generated at least 500 or better over a thousand round trips and <strong><a href="mailto:matthias.nehlsen@gmail.com">email it to me</a></strong>. Make sure to add your location and optionally your name on twitter if you&#8217;d like to be mentioned by name. The first ten will get the <strong><a href="https://leanpub.com/building-a-system-in-clojure/">book I&#8217;m working on</a></strong> for free.</p>

<p>Cheers,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I have heard this multiple times over the years, and I have no idea where it originates. <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>If you&rsquo;re interested in this real-time application for tweet stream analysis with multiple server-side processes and a ClojureScript frontend, you can either read the source code or buy my book about it. Beware that there&rsquo;s no substantial write-up about the library yet as the library is still changing quite a bit. But there will be soon.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>The histogram is written entirely in ClojureScript and only making use of the systems-toolbox library and <strong><a href="http://reagent-project.github.io">Reagent</a></strong>. So far, it is only part of the example application, but I&rsquo;m planning on making a library component out of this chart and a few others. There certainly are a couple of ways that visual representations of system behavior can help in understanding systems.  <a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure - Where are the Updates???]]></title>
    <link href="http://matthiasnehlsen.com/blog/2015/04/09/Where-Are-The-Updates/"/>
    <updated>2015-04-09T17:30:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2015/04/09/Where-Are-The-Updates</id>
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> I&#8217;ve been developing a library for building systems, and it has already made the codebase of the BirdWatch application much simpler. I&#8217;ll be back to updating the book using the new code and concepts soon. Thanks for buying the book!</p>

<!-- more -->


<hr />

<br>


<p>Hi there, and thank you for becoming a reader of <strong><a href="https://leanpub.com/building-a-system-in-clojure">Building a System in Clojure (and ClojureScript)</a></strong> early on<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. You will probably have wondered by now when I was planning to release new content. That&#8217;s a valid question &#8211; and you deserve to know.</p>

<p>Writing a book while people are reading it is an interesting endeavor as that substantially raises the hurdle for changing something. I never thought about that before, yet it is very real. Without readers, you can just shuffle stuff around, throw away or completely rewrite parts without having to answer to anyone. With readers, the author should at least have a good reason to make radical changes. I&#8217;m not saying that&#8217;s a bad thing, it&#8217;s just different.</p>

<p>Anyhow, I believe I have good reasons to make substantial changes to what exists already. In the chapters you have probably read so far, I describe building a system, both on client and server, for consuming and processing some real-time information source. This source happens to be one of the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming APIs</a></strong>. Personally, I don&#8217;t think it&#8217;s the most interesting data source of such kind out there, but it happens to be interesting enough while also being easily accessible &#8211; and constantly running.</p>

<p>While editing the existing content of the <strong><a href="https://leanpub.com/building-a-system-in-clojure">book</a></strong>, I increasingly noticed that I was portraying building a house on a fairly low level of abstraction. It was like I&#8217;m describing the plumbing in a house by providing a detailed account of every body movement performed by the plumber. If I were the recipient of such account, on the second or third time of explaining how to hold the pressing tool in order to connect two copper pipes with a valve in between, I&#8217;d probably yawn. And mention that I understood the process the first time &#8211; please just continue with locations and purposes of the valves as I have no problem imagining how the valves got there in the first place.</p>

<p>The code inside the BirdWatch application felt the same way. Where I only wanted to focus on what makes individual components different, I was forced to write even the stuff that&#8217;s the same over and again. That&#8217;s boilerplate.</p>

<p>So instead, I wanted to pull common functionality out into a separate library. Then, a new consulting gig came along with <strong><a href="http://www.aviso.io">Aviso</a></strong> thanks to the recommendation of <strong><a href="http://homegrown.io">Ryan Neufeld</a></strong>. That could have been a problem in terms of finding the time for working on the library. But luckily, the opposite was true. The library could well be helpful in the project I&#8217;m working on, so they generously let me explore the problem and write the library.</p>

<p>I call this library <strong><a href="https://github.com/matthiasn/systems-toolbox">systems-toolbox</a></strong>. If you happen to follow me on GitHub, you may have seen the <strong><a href="https://github.com/matthiasn/systems-toolbox/commits/master">90 commits</a></strong> or so I pushed there over the last five weeks, and now I can say that it is shaping up nicely. The documentation is not up to speed yet, but the codebase of <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> provides a good point of reference. I&#8217;ve already fully migrated BirdWatch to use the new approach, both on the client- and the server-side, and it&#8217;s working well. There&#8217;s also an interesting example application in the library project itself, but I&#8217;ll discuss that in the next couple of days on here.</p>

<p>I&#8217;ve been very interested in <strong>Systems Thinking</strong> lately. If you&#8217;re not familiar with this kind of thinking, it is based on approaching and understanding the world by determining observable systems.</p>

<p>One such system is your house and how it&#8217;s dealing with changing weather conditions outside the thermal envelope. The system is trying to stabilize the inside conditions like temperature and humidity all while either energy flows into the building on a hot summer day or out on a freezing winter night. Through observing the system, we can start interacting with it through thermostat settings or, in modern times, through some smart home control center.</p>

<p>Now my realization was that <strong>a piece of software is not all that different</strong>. We have some input, such as user requests, a desired output, and a set of constraints. Now by observing the system, we can start utilizing resources better and get closer to the desired behavior. So far, so old. But what if the observability was built right into the system, instead of being tugged on with some monitoring tool? When I have components emit some logging information, and I do roughly the same in every component, then that&#8217;s boilerplate, too. Instead, the library should provide the same kind of logging for every component, such as the input and output messages, processing times, wait times, plus whatever we might want to log about a particular component&#8217;s behavior.</p>

<p>In the library I mentioned I above, so far I have mostly focused on the mechanics of the plumbing between components and how to embed functionality into these components, and that part is working well. In the <strong>BirdWatch</strong> application, I have thrown out the <strong><a href="https://github.com/stuartsierra/component">Component library</a></strong> in <strong><a href="https://github.com/matthiasn/BirdWatch">master on GitHub</a></strong>, and I find using the <strong><a href="https://github.com/matthiasn/systems-toolbox">systems-toolbox</a></strong> much more straight-forward.</p>

<p>But please don&#8217;t take my word for it and have a look for yourself. The best place to start is the <strong>BirdWatch</strong> code, specifically in these namespaces:</p>

<p><strong><a href="https://github.com/matthiasn/BirdWatch/blob/master/Clojure-Websockets/MainApp/src/clj/birdwatch/main.clj">Server-side SwitchBoard in Clojure </a></strong></p>

<p><strong><a href="https://github.com/matthiasn/BirdWatch/blob/master/Clojure-Websockets/MainApp/src/cljs/birdwatch/core.cljs">Client-side SwitchBoard in ClojureScript </a></strong></p>

<p>The new library is used throughout, both on the server and on the <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> client. Observability and metrics are not as developed as I want them to be, but that&#8217;s an area of focus now and will be addressed soon.</p>

<p>Okay, this is all for today. The <strong><a href="https://github.com/matthiasn/systems-toolbox">systems-toolbox</a></strong> library is stabilizing, and I will soon get around to writing about it in the book. For now, your best bet is to explore the code mentioned above. I&#8217;ve tried to make message flow as obvious as possible there. Please don&#8217;t forget to let me know what you think. <em>Right now</em> is probably the best time for feedback.</p>

<p>Cheers,
Matthias</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you are not a reader of the book yet, no worries, you can get the book while supply lasts on <strong><a href="https://leanpub.com/building-a-system-in-clojure">Leanpub</a></strong>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing my Workspace - Hardware, Software, Ergonomics]]></title>
    <link href="http://matthiasnehlsen.com/blog/2015/02/18/optimizing-my-workspace/"/>
    <updated>2015-02-18T21:56:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2015/02/18/optimizing-my-workspace</id>
    <content type="html"><![CDATA[<p>So within the two weeks, I spent a fair amount of time with something that should seem fairly obvious to someone who uses computers a lot, yet that I paid far too little attention in the last couple of years of my life. Now you may wonder what I&#8217;m getting at, but no worries, I&#8217;ll get there. Let me ask you something first. <strong>How many hours per week do you spend in front of your computer?</strong> Let me guess, probably most of your waking hours, considering that you read a software-related blog. But is your workplace ideal or even anywhere close to it?</p>

<!-- more -->


<p>Your friends probably think that you, being a software engineer, always work on the fastest hardware available. But do you really? Let me tell you a secret: a Retina MacBook is not the fastest computer out there. So when you freshly compile something, is waiting for 45 seconds okay or would you rather wait less than 20 seconds? I definitely fall into the latter camp.</p>

<p>Also, is your posture okay when you sit in front of a laptop? Mine hardly is. When I was 25, that didn&#8217;t matter all that much. But I&#8217;m no longer 25. I had a conversation with my orthopedist recently. I was initially there because I apparently hurt myself when doing sprints on the stairs in an old tunnel that goes under the River Elbe which is home to the second biggest port in Europe right where the tunnel allows you to cross over (or should I say under?). Here&#8217;s an old picture<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> of the building where you enter the tunnel, with an embedded illustration of where the tunnel and the stairs are located:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/elbtunnel.jpg" title="'Alter Elbtunnel'" ></p>

<p>Anyway, I still believe that sprinting up stairs is an excellent exercise for your legs as part of a longer run, but my right knee begs to differ. Whatever. Once we had finished discussing the knee issue, the orthopedist asked me about my workspace, upon which I responded that I had purchased a standing desk about a year back, but that I wasn&#8217;t really using the option of standing instead of sitting all that much. This is the desk:<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p><img class="left" src="http://matthiasnehlsen.com/images/imove-c-b-02.jpg" title="'Leuwico iMOVE-C'" ></p>

<p>He smirked, ignored what I mentioned about not using the desk as intended, and said, &#8216;Oh that&#8217;s excellent that you have the right equipment already. You know, you should <strong>be standing about 70 percent</strong> of your waking hours. That appears to be the <strong>most healthy thing to do</strong> for your back and all.&#8217;.</p>

<p>Hmm. <strong>70 percent of the time.</strong> The thing is that working with a laptop in front of me atop the desk in standing position isn&#8217;t really feasible for extended periods of time. My neck just won&#8217;t have it. Then I thought that I wanted to <strong><a href="http://matthiasnehlsen.com/blog/2015/01/21/apple-get-your-act-together/">throw my Retina MacBook out</a></strong> anyway and I also wasn&#8217;t kidding, so why not replace it with a <em>fine</em> Linux workstation plus a lightweight laptop running Linux as well<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. The thing is, I can only bring the MacBook in for service after making it redundant for a week or a week and a half. But once it is redundant for so long, it will remain redundant. So once it&#8217;s repaired, it will go on eBay. Bye Apple.</p>

<p>I&#8217;m still in the process of assembling and configuring my new workstation and also of moving my furniture around until I finally settle for the setup I want to start a project with fairly soon. I will keep you posted on how the final setup will look like.</p>

<p>Okay, that&#8217;s it for my new workspace for today. For now only this much: I&#8217;m very happy with all aspects of my new workspace. Only the energy consumption is higher than what I would find acceptable. However, a solution is already in the works: renewable energy, with solar panels and some substantial batteries. More about that another time.</p>

<p>Now on to some other stuff that I&#8217;ve been up to.</p>

<h1>Progress with &#8216;Building a System in Clojure&#8217;</h1>

<p>On the new machine I described above, I started setting up <strong>Docker</strong> containers for running load tests. I also started thinking conceptually about how to load-test different aspects of the system I&#8217;m working on for my work-in-progress <strong>Building a System in ClojureScript</strong>. I will be working on that chapter next. Together with the older workstation, I should have a decent environment for observing what kind of load can be handled per machine.</p>

<p>Also, I&#8217;ve been re-reading a book about <strong>Systems Thinking</strong> and I find that the approach applies to software artifacts as well. Another topic I will cover in much more detail later on.</p>

<h1>Inspect</h1>

<p>I fixed an issue with the <strong>inspect</strong> library where you would get some cryptic NullPointerException when pulling version <strong>0.1.4</strong> in from <strong>Clojars</strong> that did not occur when publishing locally. Not sure exactly what I did wrong when publishing it, but I have now created version <strong>0.1.5</strong> with a newer version of ClojureScript and this one appears to be working as advertised when pulled in from Clojars.</p>

<p>That&#8217;s it for today.</p>

<p>Happy coding,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Postcard from the collection of Björn Larsson, please visit <strong><a href="maritime%20timetable%20images%20website">http://www.timetableimages.com/maritime/images/ha.htm</a></strong> for context and more historic images like this one.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Leuwico iMOVE-C, more info on the <strong><a href="http://www.leuwico.com/office_furniture/products/office_furniture/imove/imove-c.html?goto=02">company website</a></strong><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>I still need to buy said Linux laptop. Let&rsquo;s see how the 2015 Dell XPS 15 will look like. Or should I get the 13-inch version? It&rsquo;s delightfully lightweight, and considering that it will not be my primary workhorse, it will probably be enough. Whenever I get a decent Internet connection, I can just dial into my new workstation and tap into it&rsquo;s sheer power.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dear Apple, Get Your Act Together]]></title>
    <link href="http://matthiasnehlsen.com/blog/2015/01/21/apple-get-your-act-together/"/>
    <updated>2015-01-21T15:30:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2015/01/21/apple-get-your-act-together</id>
    <content type="html"><![CDATA[<p>This is a rant.</p>

<!-- more -->


<p>I&#8217;ve been having issues with my Retina MacBook lately, to the point where I am craving a Linux-based laptop. But there are two programs that keep me on the Mac at the moment:</p>

<ul>
<li>Photoshop</li>
<li>Omnigraffle</li>
</ul>


<p>Everything else I think I can live with on Linux. But I might still buy one of these cute 2015 Dell XPS 13 with Ubuntu once they come out. I like the form factor a lot actually. Anyhow.</p>

<p>So my 2012 Retina MacBook showed a few signs of aging. Sometimes, but not all the time, the battery would show <strong>&#8220;Service Battery&#8221;</strong>. According to some website I found but forgot, that is supposed to be something that&#8217;s covered under the 3 year extended warranty because the battery is aging badly, not as supposed to.</p>

<p>So I tried to get that fixed at the local Apple store. But they didn&#8217;t have any appointments for <strong>two and a half weeks</strong>. Really, that&#8217;s considered good service for professionally used equipment, with the so-called care protection plan purchased in addition to the hardware? <strong>You can&#8217;t be serious!</strong></p>

<p>So I went to a local partner. Surely enough, by the time I got there, I didn&#8217;t get the warning any longer. So they wanted to keep my laptop for a night or two. That&#8217;s not really something I can easily do, though. There&#8217;s data on my laptop that&#8217;s under one confidentiality agreement or another. That&#8217;s why I encrypt both the internal SSD and all backup disks. I can, of course, prepare the hardware for that, by removing the user account, but I can&#8217;t just give the laptop away as it is. Also, the partner told me that it was extremely unlikely that they could replace the battery under warranty, even if it behaved erroneously.</p>

<p>I was determined to bring the laptop in for an extended check, but oddly enough it then worked for a little bit. It didn&#8217;t take long, though, and the annoying behavior was back. Either the logged-in user was randomly logged out in the middle of something, which is greatly annoying when you have to restart everything after logging on again, or the laptop would hibernate all of a sudden at charges around 30%.</p>

<p>Then, in the last couple of weeks, the right hinge became loose. Another annoyance, really, when I&#8217;m on the couch with the laptop on my lap, coding or working on my <strong><a href="https://leanpub.com/building-a-system-in-clojure">&#8220;Building a System in Clojure&#8221;</a></strong> book while watching TV series <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> and that hinge makes sounds at the slightest movement of anything.</p>

<p>Then I went to the other <strong>Apple Store</strong> in Hamburg last week; they had an appointment available one week later. The lady scheduling my appointment asked me why I had come in instead of just scheduling online. I told her that that had not been possible for weeks, for both stores in Hamburg. After mocking me about probably not having visited the correct website, I challenged her to go online and try it herself. Indeed, she got the same message for both stores that no appointments were available at either store at the moment.</p>

<p>A gem of an idiotic policy then came out of her mouth after realizing the non-availability of an appointment: so they, on a daily basis, only report back free appointments for one week in advance. So I asked, &#8220;Okay, sometime tonight, you&#8217;ll report back the availability of appointments until one week from toda?&#8221; She confirmed, so I asked back if she realized that she had just given me the second to last appointment available that day one week later, with a couple more hours to go that day so that likely there&#8217;d be no openings to report later on. Right.</p>

<p>But probably even worse, they also prepared me that I&#8217;d have to leave the laptop in for service for <strong>five to seven working days</strong> after bringing it in. Guys, that&#8217;s up to almost a week and a half at worst. Seriously? I get it that you stock spare parts on a just-in-time basis. But then again, <strong>I don&#8217;t even get that</strong>. Apple has so few product lines that it seems reasonable to me as a layman to keep at least the most popular spare parts for all product lines stocked at all times. Surely, the top case of the Retina MacBook that comes with the batteries, the keyboard and the trackpad all in one unit is something you&#8217;d replace frequently.</p>

<p>How many individually replaceable spare parts are there even for a Retina MacBook? Top case, screen, logic board with attached RAM, SSD, bottom cover. Did I miss anything? Sure, the logic board comes in a couple of different varieties, but I don&#8217;t think any customer would be upset if you only stocked the best one for each generation. That&#8217;s a conversation I wouldn&#8217;t mind having when my laptop is being serviced. &#8220;We&#8217;re terribly sorry, we didn&#8217;t have your logic board but we had a more powerful one, or one with more memory, or both. So we replaced yours with that one.&#8221; Customer would all of a sudden have more than they paid for initially, but hey, they&#8217;re also going through the trouble of having to bring in their work machine in the first place. Can&#8217;t imagine anyone being upset about that. All this is just to say that I believe stocking spare parts would be viable. Also, the most expensive CPU at the time of the initial purchase is probably kind of midrange now.</p>

<p>Instead, you guys want to order the spare part somewhere. Okay, fine. You may be able to deliver a new machine to me in 24 hours when I order online but you cannot have my spare part here within 24 hours and then have it worked into my machine in 36 hours and have me back at work?</p>

<p>Which brings me back to the Dell laptop. My experience with their customer service is from a few years back, roughly from 2004 to 2008, when I was doing IT support in a large, 1500-bed hospital. So I cannot say how it is nowadays. But back then, when one of their Latitude laptops, 30 or 40 of which I was responsible, had any issue, you&#8217;d call the hotline, describe the issue and have a service technician at your desk within 24 hours, oftentimes sooner, AND equipped with all spare parts that machine might need. That guy would then repair your machine on the spot and if that wasn&#8217;t possible, he&#8217;d either give you a replacement machine right away or order one with <strong>Morning Express</strong>. So at best, you called in at 4 or 5pm and had your machine up and running by 9am the next morning, already repaired. Or, at worst, you&#8217;d have the replacement by 8am the morning after.</p>

<p>I don&#8217;t remember any service failures right now. Maybe there was a time when there was plenty of ice on the street so some delivery got delayed, but that&#8217;s about it. That&#8217;s what I call an appropriate service for a laptop in the price range of the Retina MacBook &#8220;Pro&#8221;. Only that the Latitudes where cheaper, probably in the range of <strong>€800 to €1800</strong> depending on CPU, RAM and what not. Oh, and the service was not only on the premises of the hospital, it was worldwide, and we used that on rare occasions when one of the physicians was at a conference somewhere in the world and the machine had a major issue.</p>

<p>So really, Apple, get your act together and offer me the service that I expect for a professionally priced and used machine. Otherwise, I may really find a replacement for OmniGraffle and Photoshop and switch to a Linux machine instead.</p>

<p>That new Dell is sexy, by the way. I wish the 15 inch was as cute, with the same, almost non-existent frame around the display. Then, I&#8217;d make the switch work right away. I very much like the idea of running Docker natively on a Linux machine instead of running a virtual box with that <strong><a href="http://boot2docker.io">boot2docker</a></strong> thing. It works, but I don&#8217;t want the overhead. It makes the machine sluggish and warm.</p>

<p>This half-baked availability of Docker on OS X has become so much of an issue for me that at the moment, I&#8217;d definitely not go for an Apple desktop but buy a powerful Linux machine instead. You also get so much more bang for your buck, all while working daily on the platform that you&#8217;re likely going to deploy on anyway. More familiarity with the platform your software will be running on in production surely never hurt anyone.</p>

<p>The thing is, dear Apple, that I really want to like you more. In terms of industrial design or whatever, I&#8217;d choose the Retina MacBook any day of the year<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. But my emotional attachment to good industrial design doesn&#8217;t help me earn a living, really. For that, I need a customer service of which I can tell my friends, &#8220;You know, I had a problem with the machine I spent pretty much all of my working hours with, and the manufacturer of that machine went to great lengths to make sure that issue disrupted my life and schedule as little as humanly possible!&#8221;. Yes, I wish I could say that.</p>

<p>Then, to add insult to injury, I had an appointment for a session with a <strong>&#8220;Genius&#8221;</strong> yesterday. Now I find that an insult to the word <strong>genius</strong>. But also, why don&#8217;t you send a reminder of the appointment, with a button to click that says something like &#8220;I am sorry, but I would like to reschedule my audience with a genius because I had the audacity to not know my schedule with paying customers one week in advance of the precious audience&#8221;. Something like that. Yes, you did send an email when the appointment was made, but the reschedule button in that email yielded nothing more than telling me I have no appointments, neither past nor future. Quite helpful.</p>

<p>Now with that being said, I am doing a clean install of OS X. I kind of wish that wasn&#8217;t something you had to do in situations like mine, where the system just randomly logs itself out. Mind you, it&#8217;s not a restart because of a power issue connected to the battery. I think this is separate. Back in the days when I was responsible for those Windows laptops, the one recipe that worked more often than not was a re-install of Windows first and see if that fixed the issue. When the physicians asked me why the re-install was necessary - as that was not immediately obvious to them - I usually told them something along the lines of, &#8220;Well, I believe Windows kind of rots from the inside over time, and starting afresh without the accumulated mess is oftentimes all that&#8217;s needed.&#8221; That they did understand.</p>

<p>Is the same true for you, dear OS X? Are you rotting from the inside so all that&#8217;s necessary is to replace you with a fresher instance of yourself? I hope so. The battery I can live with for a little while, but logging me out is really annoying. I&#8217;d rather have that fix itself than having to go to the temple to consult a genius.</p>

<p>Will I be using Apple three years from now? Time will tell, but probably not. If there&#8217;s going to be a 15-inch, four-point-something pounds laptop with nearly the same dedication to hardware design and the same specs or better but running Linux, the availability of Docker will be the one feature that&#8217;ll tip over my decision.</p>

<p>That&#8217;s all for today <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>Cheers,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Right now, I am mostly watching either <strong>Suits</strong> or <strong>American Horror Story</strong>. I found the latter to be very addictive, particularly from the second season on. If I were you and you haven&rsquo;t watched any of that yet and are curious about it, I suggest you start with <strong>Season 2</strong>. You wouldn&rsquo;t miss anything as the plots are not connected between <strong>Season 1</strong> and <strong>Season 2</strong>. You&rsquo;d only recognize a couple of familiar faces from the previous season.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This is despite laptop having so few USB ports. Really, two more, one on each side, to make the machine actually practical would not have been possible?<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>By the way, why does Colin Firth look so botox&#8217;ed? He&rsquo;s 54, are a few wrinkles on your forehead something to be shamed of at his age? I don&rsquo;t think so. Just a random thought from watching the Golden Globes while typing this.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Progress with “Building a System in #Clojure”: new Feature]]></title>
    <link href="http://matthiasnehlsen.com/blog/2015/01/16/Book-New-Features/"/>
    <updated>2015-01-16T19:35:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2015/01/16/Book-New-Features</id>
    <content type="html"><![CDATA[<p>Most of this week, I was working on the client-side codebase of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application in order to remove the hairball in its architecture that I mentioned last week. That&#8217;s been going really well. But how do I make the readers aware of what I am working on right now? Your time is precious, so you may only want to read the stuff that I feel good about already, unless you have the time to dive deeper and compare the good, the bad and the ugly. That&#8217;s fine, too, but it&#8217;s just going to involve more effort on your part.</p>

<!-- more -->


<p>So what to do? From now on I will keep a journal in the beginning of the book to keep track of what I&#8217;m working on at any moment and also the status of each chapter. Then, since that&#8217;s going to be in the free preview of the book as well, even if you haven&#8217;t purchased it or didn&#8217;t take advantage of the initial availability for free, you can follow along, see where it&#8217;s going and then purchase the book iff it has gotten to the point where you&#8217;d want to read it cover to cover.</p>

<p>I started a brief version of what I described above and will keep that updated frequently. Seems like a good way to communicate the process.</p>

<p>Okay, that&#8217;s all for today. Keep on coding!</p>

<p>Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Progress with “Building a System in #Clojure”: Hairball Removal]]></title>
    <link href="http://matthiasnehlsen.com/blog/2015/01/09/Hairball-Removal/"/>
    <updated>2015-01-09T12:05:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2015/01/09/Hairball-Removal</id>
    <content type="html"><![CDATA[<p>I’ve been struggling with finishing the next chapter of my <strong><a href="https://leanpub.com/building-a-system-in-clojure">&#8220;Building a System in Clojure&#8221;</a></strong> book. I tried to explain and draw the client-side architecture, but instead I’ve been procrastinating <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> around the conceptual drawings for days and now I realize why. The current architecture of the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> web client just plain <strong>sucks</strong>.</p>

<!-- more -->


<p>Which makes me think that procrastination is quite possibly more useful than its grim reputation suggests. Sure, I could have just forced myself to draw the current architecture while oppressing critical thought. The real message, though, was that I had a more than valid reason not to be excited. Anyway, I digress. Yesterday, I finally tried to draw it and the task made me feel uneasy in my stomach. Let’s just say that unsightly hairball had to go.</p>

<p>So instead, I grabbed a <strong>pencil</strong> and carefully drew the blueprint <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> for the architecture I desire. That’s done; it looks well groomed to me, and I’m excited about the refactoring ahead.</p>

<p>If you are a reader of the book, you can download the current version, see what I mean when I say it’s gruesome and compare that with the redesign when it’s finished. Consider that a feature of becoming a reader early on in the writing process.</p>

<p>That’s it; I’m back to a fun coding session. Thanks for reading.</p>

<p>Happy 2015,
Matthias</p>

<p><strong>PS</strong> - you can start reading the book <strong>right away</strong>:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I had some fun animating fireworks by manipulating SVG in ClojureScript instead. Maybe I’ll make an article out of that one day.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>By the way, it was terrific to stow the laptop away safely and use paper and pencil instead. You should give it a try.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Holidays and Thanks for Reading]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/12/23/Happy-Holidays/"/>
    <updated>2014-12-23T15:15:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/12/23/Happy-Holidays</id>
    <content type="html"><![CDATA[<p>Last week, I published the very first version of my <strong><a href="https://leanpub.com/building-a-system-in-clojure">&#8220;Building a System in Clojure&#8221;</a></strong> book. I’m thrilled by the amount of interest it has already generated and I’ll do my best to live up to your expectations.</p>

<!-- more -->


<p>Today, after a few hundred readers signed up for free, I have removed the free option. There are more than enough readers now to give valuable feedback on the early versions of the book.
Yesterday and today I have published new versions, with the latest one being roughly 25 pages longer than the initial version. The content is growing fast and a good part of the reason why is that I <strong>really like the authoring process</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>I will publish another version <strong>tomorrow</strong> that aims at covering the entire server-side code in writing and will probably also contain some additional drawings to make things clearer.</p>

<p>So, you will have something to read over the holidays<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Please let me know if any passage needs clarification.</p>

<p><strong>Thank you</strong> for reading this blog and a <strong>special</strong> thank you if you read my book. I had a plenty of fun this year and I learned a lot. I will take the next week off, so I’ll see you back here in 2015.</p>

<p>Happy Holidays,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I am using <strong><a href="https://leanpub.com">leanpub.com</a></strong> to publish the book and I love the authoring workflow, it has been nothing but pleasure so far. Writing in Markdown is so much better than constantly having to wrangle with Word files. I will probably write more about that later, but already a <strong>big shout-out to guys at Leanpub</strong> for offering a great service.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>But only after you spend enough time with your loved ones.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm writing a book about Building a System in Clojure]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/12/19/Clojure-Book/"/>
    <updated>2014-12-19T16:15:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/12/19/Clojure-Book</id>
    <content type="html"><![CDATA[<p>I thought about where to take my series about <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">Building a System in Clojure</a></strong> next and realized that I don&#8217;t like the format of a <strong>blog series</strong> all that much. Instead, the format of a <strong>book</strong> seems like a better choice; one where you, the potential reader, are invited to provide feedback from the very first moment of the writing process. I have already started that process and for now I have transferred the existing articles from the series into the book without much further editing. Over the next couple of weeks, I will be working on making the content more consistent with the book format. The book is available for free on <strong><a href="https://leanpub.com/building-a-system-in-clojure">leanpub.com</a></strong>. Iff (if and only if) you find the content to be of value, you can pay a suggested price, but that&#8217;s entirely up to you and something you can decide on later.</p>

<!-- more -->


<p>The book format will allow me to write a consistent narrative around the flow of data through a system, where we will follow the journey of data from a streaming source to a user interface that updates changes according to new data from the streaming source immediately, or rather within a few hundred microseconds.</p>

<p>As a sample application, we will use tweets streaming live from the Twitter Streaming API. In case you haven&#8217;t seen it yet, this is how the application looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/birdwatch-pure.jpg" title="New Design with Pure CSS" alt="New Design with Pure CSS"></p>

<p>There&#8217;s also a <strong><a href="http://birdwatch2.matthiasnehlsen.com/">live version</a></strong> of this application. I have ideas for additional sample applications, but they may or may not come into existence, depending on how much time I will have for this book project.</p>

<p>The process of writing this book will take place while exploring the problem space, not afterwards. All designs and implementations are fluid at this point and I will be happy to discuss all aspects of the system in this <strong><a href="https://groups.google.com/forum/#!forum/building-a-system-in-clojure/">Google Group</a></strong> and adapt and rewrite aspects when better solutions arise in these discussions. You are also welcome to join the development process: do reach out when you have a suggestion on how to get involved. The project needs tests, better inline documentation, code reviews, and quite possibly better design and code.</p>

<p>Regarding the book writing process, first and foremost I would love questions for clarification so the content will come out as approachable as possible. If you find a typo, please correct it and submit a <strong><a href="https://github.com/matthiasn/clojure-system-book">pull request</a></strong> right away.</p>

<p>I am looking forward to the weeks to come. It&#8217;s much better to be able to put some work in here and there on whatever I&#8217;m interested in that day instead of writing monolithic blog posts that aim at conclusively covering an aspect of the application, usually way before I have any conclusive understanding.</p>

<p>Would you do me a favor? <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Please sign up as a reader (for free and with no commitment whatsoever) right away if you think you might at all be interested in what we&#8217;ll cover in this book. I would very much like to know how much interest there might be and I promise I will try to do what I can to make the time spent on reading this book or contributing to it worth your while.</p>

<p>Cheers and Happy Holidays,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>As a little christmas present, if you will.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Clojure eXchange, next steps in BirdWatch, Clojure and me]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/12/12/Weekly/"/>
    <updated>2014-12-12T14:20:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/12/12/Weekly</id>
    <content type="html"><![CDATA[<p>Last week was great. I had just come back from my trip to the United States the week before, where I attended the <strong><a href="http://clojure-conj.org">Conj</a></strong> and got to hang out with dear friends in both Washington DC and New York City. I used to live in DC in 2009 and 2010, and it was really good to be back. Last Friday, I had a talk at <strong><a href="https://skillsmatter.com/conferences/1956-clojure-exchange-2014">Clojure eXchange</a></strong> in London about my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application and my journey to Clojure. I think there should be a recording somewhere, but I haven’t checked it out just yet. The day before that, I had parted from <strong><a href="http://www.scala-lang.org">Scala</a></strong> with a <strong><a href="http://matthiasnehlsen.com/blog/2014/12/04/Farewell-Scala/">farewell letter</a></strong> here on this blog. It took me by surprise how much attention this little letter received <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, considering that it was really only between Scala and me.</p>

<!-- more -->


<p>I am glad that relationship is over. Let me just make it clear that I don’t hate Scala. I built some interesting stuff with it in the past. But it is just not as much fun as <strong><a href="http://clojure.org">Clojure</a></strong> is and that’s extremely important to me. I became a programmer after 10 years of project and operations management in healthcare IT <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, all the while running my own company and managing employees. I did that until it was no longer a challenge. Then I thought, hey, building software myself should be plenty of fun and shouldn’t be all that difficult if done right. But none of the technologies I have worked with so far (C#, Java, JavaScript, Scala) had sparked the excitement that I was looking for. Well, that has definitely changed with Clojure.</p>

<p>I do not have any major new results to report on the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> front this week as I was mostly busy with other stuff (such as taxes and actual work). But I did change the design and kicked out <strong><a href="http://getbootstrap.com">Bootstrap</a></strong> in favor of <strong><a href="http://purecss.io">Pure CSS</a></strong>, which not only looks good by default but is also tiny in comparison to Bootstrap. Here’s a peek of how the new design looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/birdwatch-pure.jpg" title="New Design with Pure CSS" alt="New Design with Pure CSS"></p>

<p>Much better, I find. You can also check out a <strong><a href="http://birdwatch2.matthiasnehlsen.com/">live version</a></strong>. I had really developed a distaste for the old Bootstrap look over the course of the year. Next I want to replace <strong><a href="http://d3js.org/">D3</a></strong>, at least for the bar chart generation. I’d much rather manipulate the <strong><a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a></strong> in <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> and build the charts myself. Is this going to save me time? Probably not, but this is a toy project, so what does saving time in that context even mean? I am interested in manipulating graphical elements directly from ClojureScript and that’s what matters. I have made good progress so far, but nothing that I’d want to present just yet, maybe next week.</p>

<p>Also, I was able to put some more thought into server-side aggregation. But again, nothing for this week, please check back soon.</p>

<p>Oh, before I forget, I will present at the <strong><a href="http://www.meetup.com/ClojureUserGroupHH/events/218689956/">Clojure Meetup in Hamburg</a></strong> next week on Thursday. Please come and say hi if you&#8217;re anywhere near Hamburg.</p>

<p>Cheers,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Thanks to Hacker News, there were like an extra <strong>30K</strong> pageviews on my blog during the first 36 hours after publishing the farewell note. I should publicly part more often, I guess.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Okay, I did write some software myself at that time, but my involvement with software development was was mostly overseeing development done by others.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A farewell note to a programming language]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/12/04/Farewell-Scala/"/>
    <updated>2014-12-04T14:55:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/12/04/Farewell-Scala</id>
    <content type="html"><![CDATA[<p>Dear Scala,</p>

<p>Do you remember how we first met, back in 2012? I thought your functional approach was fresh, and different. For a while I believed we were made for each other. A first project was a success; on my own I was comfortable with the good parts of you. But as soon as I started working in teams writing Scala, your immense syntax started drowning me. At first, I took it as a compliment that you tried to please me by offering me to work the way I liked. But then I noticed that it wasn’t something you did for me in particular. Instead, you try to be everybody’s darling by offering every software development paradigm known to man.</p>

<!-- more -->


<p>I found that to be particularly gruesome when working with seasoned Java developers. Yeah, sure, they have been doing OOP for a long time, for whatever that’s worth. But that doesn’t mean that it’s a good idea to recreate Java in Scala with just a little bit less of boilerplate. In well over a year of working in Scala teams there hasn’t been a single day where I felt that there was a shared mindset about how to develop a system or even approach a problem.</p>

<p>All this is not to say that one can’t develop powerful systems with you; there’s plenty of proof otherwise, but my heart is no longer in it and I am not even sure it ever was.</p>

<p>Last year I wrote this little application called <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> in <strong><a href="http://www.scala-lang.org/">Scala</a></strong> and <strong><a href="https://www.playframework.com">Play Framework</a></strong>, initially only to have something to show when interviewing for jobs. But then the whole thing developed a life of its own. It was like a cute little stray dog that all of a sudden showed up on your porch. You don’t really know what to do with it but it sure looks hungry, so you feed it; it decides to stick around and before you know it, you find yourself making regular appointments at a dog spa. You know, that kind of story. It’s cute though, I’m not complaining.</p>

<p>But I never felt compelled to put much work in the server side implementation, in part because I already spent my workdays writing Scala. Also, while the server side implementation looks deceptively simple, it is actually hard to understand in depth because it uses the <strong><a href="https://www.playframework.com/documentation/2.2.x/Iteratees">Iteratee library</a></strong>. I find this library difficult to understand, even more difficult to explain to other people, and next to impossible to grasp the source code of. As a matter of due diligence, I prefer to rely only on library code that I have read and understood well. In this case, I could not fix even the smallest bug, and that’s a huge red flag.</p>

<p>So I spent more time working on different clients. Initially, there was the AngularJS/JavaScript version, then another version with ReactJS/JavaScript and even another one with ReactJS/ScalaJS.</p>

<p>All the while I was flirting with <strong><a href="http://clojure.org/">Clojure</a></strong>, so it was a logical next step for me to write a client with <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> and <strong><a href="https://github.com/swannodette/om">Om</a></strong>. I quickly abandoned that one, not because I didn’t like it, but because I liked the ClojureScript experience so much that I wanted to abandon you altogether, dear Scala, in favor of an all-Clojure version.</p>

<p>So here it is. I have met another programming language, and for the first time I feel like I’ve met a soul mate, as far as programming languages go <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Sorry about that, but I have to follow my heart.</p>

<p>But why am I writing this all of a sudden, you might ask? Good question. The other day yet another recruiter approached me about a Scala project, which happens more often than I even care to look up whom the project is for. But this time it was different. I felt the need to make a clean break. Considering my career, I decided that you, Scala, would not be a part of it, no matter how high the demand or how impressive the daily rate for freelance gigs.</p>

<p>I will be happier with projects in Clojure. Which brings me to an unfortunate observation I made at the Conj. I was a little surprised about the number of people I spoke to that wished they could code Clojure to pay their rent <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>To sum up things, dear Scala, it is definitely over between the two of us. I don’t need to take a break; I have found a better match. That doesn’t mean anyone else should follow my example blindly, though. But what it may get people thinking about is that whatever the language they are currently using, if they’re not happy, they may want to look for a better fit for themselves. I don’t know about other people’s life, but mine is too short for working with something that I don’t love.</p>

<p>Cheers,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The whole LISP / S-expression / homoiconicity thing seems very compatible with the operating system of my brain, and I also feel that constraint is bliss. There aren’t nearly as many ways to write idiomatic Clojure as there are ways to write a Scala program.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>It must be possible to start a lucrative business around software written in Clojure, in particular when I consider how much more productive I personally am when I write Clojure compared to Scala. If you know of any opportunities where my skillset could be an asset, please let me know. Ideally, I’d favor multiple short-term projects over one long project. These short projects could start with an analysis of a problem or an existing system, a prototype for something new and then checking back on it from time to time. If that sounds like something you may need, please contact me offline. My email is on my GitHub repo.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspect - println no more]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/11/14/Inspect/"/>
    <updated>2014-11-14T17:30:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/11/14/Inspect</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong>: I realized how much I <strong>disliked</strong> the process of <strong>logging data structures</strong> to the console and then trying to find them and repeatedly commenting out and uncommenting <strong>println</strong> statements. So I decided to <strong>fix that</strong>.</p>

<!-- more -->


<p>Last Friday, I was thinking about how to approach the next task in the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application. I came up with the idea to do <strong>aggregations</strong> on data from ElasticSearch on the server side and then send the aggregate on the wire over <strong><a href="http://en.wikipedia.org/wiki/WebSocket">WebSockets</a></strong> to a <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> client. In order to build up the aggregate data structures, I would need to inspect what I was building during development. But I didn&#8217;t have a good way to do that.</p>

<p>Sure, <strong>println</strong> statements can be useful when reasoning about parts of an application. Just leaving them in there is <strong>not feasible</strong> though, particularly when running the application under any kind of load. Finding a logged item on the console can easily be like trying to find a needle in a haystack. For example in BirdWatch, my current configuration receives around <strong>50 tweets per second</strong>. I am also using this configuration for the development process. Do I want to log this relatively large tweet data structure every time, 50 times a second? <strong>Certainly not</strong>, as that would make it difficult to find everything else. Occasionally, though, I want to see one of those or any other kind of data structure used in the system.</p>

<p>So what do we usually do? I constantly found myself commenting out and uncommenting <strong>println/log</strong> statements and then restarting the application. That&#8217;s not fun at all and a <strong>huge waste of time</strong>.</p>

<p>Here&#8217;s my idea of how to do it <strong>better</strong>: what if we can leave all those log statements in there and send them to a subsystem that can easily be integrated into <strong>any existing Clojure application</strong> and takes care of the presentation? This subsystem as a <strong>default doesn&#8217;t do anything</strong> with the logged data, which makes it very cheap to process even higher loads<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. The subsystem then exposes a <strong>web application</strong> that allows clients to see the <strong>next n</strong> of a certain event type (or combinations thereof). Here&#8217;s how that looks like, I have already implemented it:</p>

<p><a href="http://inspect.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/inspect.jpg" /></a></p>

<p>When you connect a new client, as a default you currently get the <strong>next 10</strong> of every message type known to the system. On the left, there is a table that shows how many items per each type are left. On the right of the table, there are buttons that toggle if the respective data type is to be shown or not. The <strong>next</strong> button will increment the number for each selected type by whatever is in the field.</p>

<p>You can click on the image for a live version. In this simple example, there are a couple of message types:</p>

<ul>
<li><strong>:interval-put/every-millisecond</strong> - emitted every millisecond by a go-loop</li>
<li><strong>:interval-put/every-second</strong> - emitted every second by a go-loop</li>
<li><strong>:interval-put/every-five-seconds</strong> - emitted every five seconds by a go-loop</li>
<li><strong>:interval-put/every-ten-seconds</strong> - emitted every ten seconds by a go-loop</li>
<li><strong>:interval-put/every-minute</strong> - emitted every minute by a go-loop</li>
<li><strong>:ws/event-in</strong> - emitted when there&#8217;s an incoming message on a WebSocket connection (such as a new connection)</li>
</ul>


<p>Using the <strong>inspect</strong> library is super simple. All you need to do is add <strong>inspect</strong> to the dependencies in your project.clj:</p>

<pre><code>[com.matthiasnehlsen/inspect "0.1.1"]
</code></pre>

<p>Then, you probably want to import it where you need it:</p>

<pre><code>[com.matthiasnehlsen.inspect :as inspect :refer [inspect]]
</code></pre>

<p>Next, you want to start it once, from anywhere:</p>

<pre><code>(inspect/start)
</code></pre>

<p>That&#8217;s all; you can now use it, for example:</p>

<pre><code>(inspect :interval-put/every-second {:msg "every second"})
</code></pre>

<p>There is no need to make the event types known to inspect, other than just passing namespaced keywords. Inspect will then learn the event types itself.</p>

<p>Here is the full example application (minus the namespace definition, optional port configuration and REPL reload; click on the link on the upper right of the code block for the entire file):</p>

<figure class='code'><figcaption><span>inspect sample application</span><a href='https://github.com/matthiasn/inspect/blob/65feac4f2bddc9711c7e5798020c3f0b993407a0/example/src/example/core.clj'>core.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">interval-put-loop</span>
</span><span class='line'>  <span class="s">&quot;put msg on chan every interval milliseonds&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">interval</span> <span class="nv">msg-type</span> <span class="nv">msg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="p">(</span><span class="nf">timeout</span> <span class="nv">interval</span><span class="p">))</span> <span class="p">(</span><span class="nf">inspect</span> <span class="nv">msg-type</span> <span class="nv">msg</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span>     <span class="mi">1</span> <span class="ss">:interval-put/every-millisecond</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every millisecond&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span>  <span class="mi">1000</span> <span class="ss">:interval-put/every-second</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every second&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span>  <span class="mi">5000</span> <span class="ss">:interval-put/every-five-seconds</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every five seconds&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span> <span class="mi">10000</span> <span class="ss">:interval-put/every-ten-seconds</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every ten seconds&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span> <span class="mi">60000</span> <span class="ss">:interval-put/every-minute</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every minute&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/save</span> <span class="s">&quot;example.pid&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/delete-on-shutdown!</span> <span class="s">&quot;example.pid&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Application started, PID&quot;</span> <span class="p">(</span><span class="nf">pid/current</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">inspect/start</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Inspect internals</h2>

<p>The inspect library internally makes use of the <strong><a href="https://github.com/stuartsierra/component">component library</a></strong>, <strong><a href="https://github.com/ptaoussanis/sente">Sente</a></strong> for the WebSockets connection and <strong><a href="https://github.com/reagent-project/reagent">Reagent</a></strong> for building a reactive UI on top of <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong>. I won&#8217;t go into details today, but I probably will soon.</p>

<h2>Conclusion</h2>

<p>Okay, this is it for today. This project is less than a week old and I am still in the middle of exploring the problem space. In particular, I want to start using it everywhere in my BirdWatch project so that I can get a better idea of how I want to interact with the UI. I think inspect, among other things, makes for a useful <strong>executable documentation</strong> of a system, where you can easily find out how the data in your system looks like. I would have loved to have that in the past when I was new to a project.</p>

<p>Despite this project being so young, there is no reason why you couldn&#8217;t <strong>try it</strong> already. Maybe you have ideas on what you&#8217;d like to see in there. There&#8217;s a good chance I can implement other good ideas over the upcoming weekend. Either discuss here in the comments or open an issue on <strong><a href="https://github.com/matthiasn/inspect">GitHub</a></strong>.</p>

<p>Over the next weeks, I will show how to use the above inside a real application. Also, I might write an article about how <strong>inspect</strong> works internally. Of course the code is on <strong><a href="https://github.com/matthiasn/inspect">GitHub</a></strong>. It&#8217;s pretty short; the entire thing including the UI is only around <strong>300 lines</strong> of Clojure and ClojureScript code.</p>

<p>Curious what&#8217;s next? You can subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> or <strong><a href="https://twitter.com/matthiasnehlsen">follow me on Twitter</a></strong> and I will let you know when the next article is out.</p>

<p>Cheers and have a great weekend,<br>
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In the default case when no client wants messages, the extra burden should be minimal. There shouldn’t even be significant GC pressure as the evaluated immutable data structures exist already and are structurally shared. In the example application, I am hitting the system with over 1,000 messages per second and the extra load to match the messages with connected clients is about 3-5% (out of a total of 800% on my Retina MacBook). But this would have to be verified before you use it in production, obviously.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure Part 4 - Inter-process communication with Redis]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/11/07/Building-Systems-in-Clojure-4/"/>
    <updated>2014-11-07T14:32:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/11/07/Building-Systems-in-Clojure-4</id>
    <content type="html"><![CDATA[<p><strong><a href="http://matthiasnehlsen.com/blog/2014/10/30/Building-Systems-in-Clojure-3/">Last week</a></strong>, I drew a picture of how I wanted to break apart a monolithic application and instead run different parts of the application in separate processes / separate JVMs. The idea was to have a single client for the connection to the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a></strong> and the persistence of the received Tweets in <strong><a href="http://www.elasticsearch.com">ElasticSearch</a></strong>, plus multiple machines to serve WebSocket connections to the client. For the communication between the processes, I picked <strong><a href="http://redis.io/topics/pubsub">Redis Pub/Sub</a></strong> because its model of communication appears to suit the requirements really well. As cute as the drawing may be, I prefer code (plus drawing), so I took the previous monolith apart over the weekend and put <strong><a href="http://redis.io">Redis</a></strong> in between for communication. It worked really well and here&#8217;s how.</p>

<!-- more -->


<p>Okay, it wasn&#8217;t a total surprise to see how well it worked. After all, I started using the <strong><a href="https://github.com/stuartsierra/component">Component library</a></strong> together with <strong><a href="https://github.com/clojure/core.async">core.async</a></strong> for exactly this reason a few weeks ago. I wanted the freedom to only ever having to put stuff on conveyor belts and not having to think about how a thing got where it needs to go, or even where it needs to go at all.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/redesign2.png" title="Redesigned Architecture - InterOp" alt="Redesigned Architecture - InterOp"></p>

<h2>Redis Pub/Sub with Carmine</h2>

<p>I chose <strong>Pub/Sub</strong> over a queue because I wanted to <strong><a href="http://en.wikipedia.org/wiki/Fan-out">fan-out</a></strong> messages to multiple clients. Any connected processes are only supposed to be fed with data during their uptime, with no need to store anything for when they aren&#8217;t connected. For interfacing with <strong>Redis</strong> from Clojure, I then chose <strong><a href="https://twitter.com/ptaoussanis">Peter Taoussanis</a></strong>&#8217;s <strong><a href="https://github.com/ptaoussanis/carmine">carmine</a></strong> client and it turned out to be a great choice.</p>

<p>Let&#8217;s look at some code. First of all, I am using a <strong>component</strong> that provides a <strong>send channel</strong> and a <strong>receive channel</strong>. It can be reused on either side of the Pub/Sub connection (or for bidirectional communication, of course):</p>

<figure class='code'><figcaption><span>Interop Channels Component</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/TwitterClient/src/clj/birdwatch_tc/interop/component.clj'>component.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Interop-Channels</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">component/Lifecycle</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">start</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Interop Channels Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:send</span> <span class="p">(</span><span class="nf">chan</span><span class="p">)</span> <span class="ss">:receive</span> <span class="p">(</span><span class="nf">chan</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stop</span>  <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stop Interop Channels Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:send</span> <span class="nv">nil</span> <span class="ss">:receive</span> <span class="nv">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This channels component can now be wired into other components. Here&#8217;s the component on the publisher side:</p>

<figure class='code'><figcaption><span>Publishing Interop Component</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/TwitterClient/src/clj/birdwatch_tc/interop/component.clj'>component.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Interop</span> <span class="p">[</span><span class="nv">conf</span> <span class="nv">channels</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">component/Lifecycle</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">start</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Interop Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">conn</span> <span class="p">{</span><span class="ss">:pool</span> <span class="p">{}</span> <span class="ss">:spec</span> <span class="p">{</span><span class="ss">:host</span> <span class="p">(</span><span class="ss">:redis-host</span> <span class="nv">conf</span><span class="p">)</span> <span class="ss">:port</span> <span class="p">(</span><span class="ss">:redis-port</span> <span class="nv">conf</span><span class="p">)}}]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">red/run-send-loop</span> <span class="p">(</span><span class="ss">:send</span> <span class="nv">channels</span><span class="p">)</span> <span class="nv">conn</span> <span class="s">&quot;matches&quot;</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">conn</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stop</span>  <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stopping Interop Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we are creating a configuration map and start a send loop with this configuration for the <strong>&#8220;matches&#8221;</strong> topic. Here&#8217;s that loop:</p>

<figure class='code'><figcaption><span>Send Loop</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/TwitterClient/src/clj/birdwatch_tc/interop/redis.clj'>redis.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-send-loop</span>
</span><span class='line'>  <span class="s">&quot;loop for sending items by publishing them on a Redis pub topic&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">send-chan</span> <span class="nv">conn</span> <span class="nv">topic</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">msg</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="nv">send-chan</span><span class="p">)]</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">car/wcar</span> <span class="nv">conn</span> <span class="p">(</span><span class="nf">car/publish</span> <span class="nv">topic</span> <span class="nv">msg</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">recur</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <strong>go-loop</strong> consumes all messages that come in on <strong>send-chan</strong> channel and publishes them on <strong>topic</strong> for the specified configuration <strong>conn</strong>.</p>

<p>Here&#8217;s the other side of the communication with the component subscribing to the same topic. The channels component stays the same. The component itself looks a little different:</p>

<figure class='code'><figcaption><span>Subscribing Interop Component</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/MainApp/src/clj/birdwatch/interop/component.clj'>component.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Interop</span> <span class="p">[</span><span class="nv">conf</span> <span class="nv">channels</span> <span class="nv">listener</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">component/Lifecycle</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">start</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Interop Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">conn</span> <span class="p">{</span><span class="ss">:pool</span> <span class="p">{}</span> <span class="ss">:spec</span> <span class="p">{</span><span class="ss">:host</span> <span class="p">(</span><span class="ss">:redis-host</span> <span class="nv">conf</span><span class="p">)</span> <span class="ss">:port</span> <span class="p">(</span><span class="ss">:redis-port</span> <span class="nv">conf</span><span class="p">)}}</span>
</span><span class='line'>               <span class="nv">listener</span> <span class="p">(</span><span class="nf">red/subscribe-topic</span> <span class="p">(</span><span class="ss">:receive</span> <span class="nv">channels</span><span class="p">)</span> <span class="nv">conn</span> <span class="s">&quot;matches&quot;</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">conn</span> <span class="ss">:listener</span> <span class="nv">listener</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stop</span>  <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stopping Interop Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">red/unsubscribe</span> <span class="nv">listener</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">red/close</span> <span class="nv">listener</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">nil</span> <span class="ss">:listener</span> <span class="nv">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like for the publisher side, there&#8217;s the configuration map. Next, we subscribe to a topic and hold on to the returned listener so that we can unsubscribe from the topic and shut it down later when the component is shut down<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<figure class='code'><figcaption><span>Subscription-related Functions</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/TwitterClient/src/clj/birdwatch_tc/interop/redis.clj'>redis.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">msg-handler-fn</span>
</span><span class='line'>  <span class="s">&quot;create handler function for messages from Redis Pub/Sub&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">receive-chan</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">msg-type</span> <span class="nv">topic</span> <span class="nv">payload</span><span class="p">]]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="nv">msg-type</span> <span class="s">&quot;message&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">put!</span> <span class="nv">receive-chan</span> <span class="nv">payload</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">subscribe-topic</span>
</span><span class='line'>  <span class="s">&quot;subscribe to topic, put items on specified channel&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">receive-chan</span> <span class="nv">conn</span> <span class="nv">topic</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">car/with-new-pubsub-listener</span>
</span><span class='line'>    <span class="p">(</span><span class="ss">:spec</span> <span class="nv">conn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;matches&quot;</span> <span class="p">(</span><span class="nf">msg-handler-fn</span> <span class="nv">receive-chan</span><span class="p">)}</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">car/subscribe</span> <span class="nv">topic</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">unsubscribe</span>
</span><span class='line'>  <span class="s">&quot;unsubscribe listener from all topics&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">listener</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">car/with-open-listener</span> <span class="nv">listener</span> <span class="p">(</span><span class="nf">car/unsubscribe</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">close</span>
</span><span class='line'>  <span class="s">&quot;close listener&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">listener</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">car/close-listener</span> <span class="nv">listener</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Performance of Redis</h2>

<p>Redis does a lot with very little CPU utilization. In a non-scientific test, I fired up 50 JVMs (on four machines) subscribing to the topic on which the TwitterClient publishes tweets with matched percolation queries. Then I changed the tracked term from the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a></strong> to <strong>&#8220;love&#8221;</strong>, which reliably maxes out the rate of tweets permitted. Typically, with this term I see around 60 to 70 tweets per second. With 50 connected processes, 3000 to 3500 tweets were delivered per second overall, yet the CPU utilization of Redis idled somewhere between 1.7% and 2.3%.</p>

<h2>Conclusion</h2>

<p>I&#8217;m glad I got around to the process separation last weekend. It was fun to do and gives me confidence to proceed with the design I have in mind. Very little had to change in order to break the application apart, thanks to <strong>Component</strong> and <strong>core.async</strong>. In one of my next articles, I will describe the <strong>Docker</strong> configuration for running a <strong>TwitterClient</strong> container, a couple of containers with the client-serving JVMs connecting over <strong>Redis</strong>, a container with <strong>Redis</strong> itself and another container with <strong>nginx</strong> for load-balancing, plus a few containers for running an <strong>ElasticSearch</strong> cluster. Subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> or <strong><a href="https://twitter.com/matthiasnehlsen">follow me on Twitter</a></strong> if you want to be informed once the next article is out. The code of the fully functioning application is on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>. Let me know if you run into any issues when trying it out.</p>

<p>Cheers and have a great weekend,
Matthias</p>

<p><strong>P.S.</strong> This series of articles is now continued in this book:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The beauty of the component library is that during development, we can stop a component and restart it after reloading the code. This takes much less time than completely reloading the application. Watch <strong><a href="https://www.youtube.com/watch?v=13cmHf_kt-Q">Stuart Sierra&rsquo;s talk</a></strong> for more information on the component library. I also created a <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Sierra_Stuart/Components.md">transcript of this talk</a></strong> if you prefer reading.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure Part 3 - Redesign]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/30/Building-Systems-in-Clojure-3/"/>
    <updated>2014-10-30T19:06:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/30/Building-Systems-in-Clojure-3</id>
    <content type="html"><![CDATA[<p>I recently did a lot of transcript proofreading concerning enlightening talk for my <strong><a href="https://github.com/matthiasn/talk-transcripts">talk-transcripts project</a></strong>. The most recent one was <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/DesignCompositionPerformance.md">Design, Composition and Performance</a></strong>, the tenth transcript of a talk by <strong><a href="https://twitter.com/richhickey">Rich Hickey</a></strong>. That one in particular got me thinking that there are quite a few ideas I want to adopt in <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>, the application about which I started writing this series of articles. That calls for some <strong>redesign</strong>, so it’s probably time to make up my mind what exactly it is that I am trying to solve with this application.</p>

<!-- more -->


<p>So here’s the idea:</p>

<ul>
<li>We have a stream of information and we are interested in a subset of that information, which we can match on via <strong>full-text search</strong> and <strong>ranges</strong>. The searches are anything that <strong><a href="http://www.elasticsearch.com">ElasticSearch</a></strong> / <strong><a href="http://lucene.apache.org">Lucene</a></strong> can match on.</li>
<li>Furthermore, we are interested in <strong>live results</strong> plus a certain period of time back into the <strong>recent</strong> past. For now, we are using tweets from the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a></strong>, but the source could be anything, such as other social media data. Sensor data could also be really interesting. Live means new matches are added to the displayed results within about a second.</li>
<li>The results are supposed to be shown in a browser, including on <strong>mobile devices</strong>. The number of items reasoned about should <strong>not be limited by</strong> the available <strong>memory</strong> of the browser<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li>My immediate goal is to be able to reason about the <strong>last one million tweets</strong> for a certain topic. Also, it should be possible to serve <strong>many concurrent ad-hoc queries</strong>, like hundreds or more different ones.</li>
</ul>


<p>I am not quite sure yet how all these requirements can be brought together, but I am going to find out and I am inviting you to join me and discuss all aspects of the application with me.</p>

<p>What comes to mind immediately when regurgitating the requirements above is <strong><a href="https://storm.apache.org">Storm</a></strong> and the <strong><a href="http://lambda-architecture.net">Lambda Architecture</a></strong>. First I thought, great, such a search could be realized as a <strong>bolt</strong> in Storm. But then I realized, and please correct me if I’m wrong, that topologies are fixed once they are running. This limits the flexibility to add and tear down additional live searches. I am afraid that keeping a few stand-by bolts to assign to queries dynamically would not be flexible enough.</p>

<p>So instead I suggest doing the <strong>final aggregation</strong> (the reduce phase) on the browser side in a <strong>ClojureScript</strong> application. On the server side, partial results are aggregated for shorter time periods. These partial results can be generated in a cluster of nodes whilst the client is fed with live data immediately. Let&#8217;s have a look at a drawing before I walk you through the individual steps:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/redesign.png" title="Redesigned Architecture" alt="Redesigned Architecture"></p>

<p>The redesign also involves splitting the application into two or three different applications. Let&#8217;s go through the interactions of the entire system step by step:</p>

<ol>
<li><p>Tweets are received from the Twitter Streaming API in chunks of (oftentimes incomplete) JSON. A <strong>stateful transducer</strong> is used to reassemble the JSON and parse chunks into Clojure maps. This aspect of the application has already been described in <strong><a href="http://matthiasnehlsen.com/blog/2014/10/06/Building-Systems-in-Clojure-2/">this recent article</a></strong> and will not be affected by the redesign.</p></li>
<li><p>Tweets are stored in <strong><a href="http://www.elasticsearch.com">ElasticSearch</a></strong> in their respective index. If the received tweet contains a retweet, the retweet status will be used to update an existing item (e.g. the RT count).</p></li>
<li><p>The newly received tweet is presented to ElasticSearch&#8217;s <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html">percolation index</a></strong> in order to find clients interested in this tweet. It is kind of a reverse matching where the new item is matched against <strong>existing searches</strong>.</p></li>
<li><p>Together with information on matched queries the tweet is published using <strong><a href="http://redis.io/topics/pubsub">Redis&#8217;s Pub/Sub</a></strong> feature. Potentially, the search ID of the matches could be used to publish to different topics<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. This constitutes the border of the first Clojure application.</p></li>
<li><p>The second Clojure application, which serves the client-side ClojureScript application as well, receives a new search via a <strong>WebSocket</strong> connection.</p></li>
<li><p>It then <strong>registers</strong> the query in ElasticSearch&#8217;s <strong>percolation</strong> index.</p></li>
<li><p>Next, the socket connection <strong>subscribes</strong> to the search ID&#8217;s topic in Redis&#8217;s <strong>Pub/Sub</strong> feature.</p></li>
<li><p>From now on matches to the client&#8217;s search will be delivered immediately to the client-side ClojureScript application.</p></li>
<li><p>This next step may or may not live in the same JVM - I haven&#8217;t decided yet. So the idea is to <strong>aggregate data on the server side</strong> and only deliver the aggregated data structures back to the client side. For example, this could be a few hundred aggregates over increments of five minutes each. These increments can easily be made addressable (and cacheable): let&#8217;s say it is 1:17pm. Then, we have a last and incomplete increment from 1:15pm that will be added upon in the browser whereas all previous ones are complete and fixed. By treating the complete ones as <strong>immutable</strong>, we can cache them and forego unnecessary and expensive requests to ElasticSearch. Since these immutable previous chunks can be addressed individually, it may make sense to deliver them through REST endpoints instead of via the WebSocket connection (the dashed line)<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p></li>
<li><p>We&#8217;ve already established that previous chunks can be cached. <strong><a href="http://redis.io">Redis</a></strong> seems like a great match utilizing the <strong><a href="http://redis.io/commands/expire">EXPIRE feature</a></strong>. So Redis would be queried for the presence of a certain chunk first. If it exists, it will be delivered right away. If not, ElasticSearch will be queried and the result will be delivered and stored in Redis for the next couple of hours or so in order to avoid unnecessary load on the ElasticSearch cluster.</p></li>
<li><p>Finally, the aggregate is delivered to the client. This could either be through the WebSocket connection or through <strong><a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a></strong> (the dashed line).</p></li>
</ol>


<h2>Conclusion</h2>

<p>So far, this is just an idea of where the application might go. I can&#8217;t wait to get started with implementing the changes; this should be a lot of fun. Completely <strong>decoupling</strong> the processes between a Twitter client and the client-serving part allows restarting the latter <strong>without disconnecting</strong> from the Streaming API. The decoupling also is much better for <strong>scaling</strong>. There&#8217;s only one connection to the Streaming API at any one time, but there&#8217;s no reason why it shouldn&#8217;t be possible to serve more clients than any one JVM/box could handle.</p>

<p>I feel confident that this will work, but I&#8217;d also <strong>love to hear from you</strong> if you think any of this is a bad idea (or any kind of comment you may have). In particular, I&#8217;d also like to hear about ideas of how to separate the application. Should this be by way of separate Leiningen projects or separate profiles in one project? Or should this be some kind of a polymorphic monolith that will only know its particular behavior via runtime configuration? I see the polymorphic monolith as an anti-pattern though, so probably not. Right now I favor completely separate projects as that makes it easier to reason about the boundaries of each application.</p>

<p>If you wonder about the next steps in the design of this application, you can subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> or <strong><a href="https://twitter.com/matthiasnehlsen">follow me on Twitter</a></strong> and I will let you know when the next article is out.</p>

<p>Cheers and have a great weekend,<br>
Matthias</p>

<p><strong>P.S.</strong> This series of articles is now continued in this book:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Right now with all tweets loaded onto the client, the maximum for a desktop browser is somewhere in the range of a <strong>few tens of thousands</strong> of tweets before the application slows down noticably.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I&rsquo;m undecided about this one. On one hand, it is strikingly simple to have a topic per search ID, which is a hash of the query itself. But on the other hand, this likely involves <strong>book-keeping</strong> of the subscriptions on the consuming side, where the subscription would have to be removed once the client disconnects. Maybe it is simpler to just serialize a set of IDs with the tweet and publish that on a single topic.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Using REST makes the communication somewhat more complex, but I still think it would make sense to move this aspect of the application into separate JVM. The <strong>GC characteristics</strong> of aggregating large amounts of data in spikes are vastly different from the (near-) realtime aspects of the WebSocket delivery of new tweets. For the aggregation, it would not matter much for the user experience if there was a <strong>stop-the-world</strong> garbage collection pause of even a few seconds, but I don&rsquo;t want that to happen for the streaming data.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Talk Transcripts, Clojure Architecture, OS X Yosemite]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/23/weekly-update/"/>
    <updated>2014-10-23T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/23/weekly-update</id>
    <content type="html"><![CDATA[<p>As I have no other article to publish this week, I thought a weekly update would be in order. Last week I wrote about <strong><a href="http://matthiasnehlsen.com/blog/2014/10/15/talk-transcripts/">making relevant and interesting talks more accessible</a></strong>. In the course of that project, I had <strong>eleven</strong> talks transcribed so far, four more than when I announced the project last week. Not only have I received great feedback about how appreciated this is, I have also learned a lot myself while proofreading the transcripts.</p>

<!-- more -->


<p>With all the stuff that I have learned and that I am still learning (with a few more talks in the pipeline), there are a couple of things that I want to rethink regarding the architecture of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch application</a></strong> before I continue with describing the architecture further. So let me think first before I publish the next article on the application&#8217;s architecture. No worries, I expect to have the next one out next week, or the week after that the lastest.</p>

<h2>Thoughts from Guy Steele&#8217;s talk on Parallel Programming</h2>

<p>The talk that got me thinking the most about the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch application</a></strong>&#8217;s architecture is Guy Steele&#8217;s talk about <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Steele_Guy/ParallelProg.md">Parallel Programming</a></strong>. Not only does he give a great explanation of the differences between parallelism and concurrency, he also gives great insights into the use of accumulators. So what, according to him, is concurrency? <strong>Concurrency</strong> is when multiple entities, such as users or processes, compete for scarce resources. In that case, we want efficient ways of utilizing the scarce resources (CPU, memory bandwidth, network, I/O in general) so that more of the entities can be served simultaneously time on the same box or number of boxes.</p>

<p><strong>Parallelism</strong>, on the other hand, is when there are vast resources and we want to allocate as many of them as possible to the same number of entities. For example we could have a CPU-bound operation, a single user and 8, 12 or however many cores. If the operation is single-threaded, we won&#8217;t be able to utilize the resources well at all.</p>

<p>We could, of course, split up the computation so that it runs on all the cores (maybe even on hundreds of boxes and thousands of cores), but that&#8217;s easier said than done. Which brings me to accumulators. The <strong><a href="http://en.wikipedia.org/wiki/Accumulator_(computing)">accumulator</a></strong>, as the name suggests, is where intermediate results are stored while a computation is ongoing. As Guy points out, this has served us extremely well for as long as we didn&#8217;t have to think about parallelism. If the computation happens serially in a single thread, the accumulator is great, but what do we do when we want to spawn 20 threads on a 32-core machine, or 1000 thread on 100 machines? If each of them had to work with the same accumulator, things would become messy and the accumulator would become the source of contention, with all kinds of ugly coordination and locking. That doesn&#8217;t scale at all.</p>

<p>Guy suggests using <strong>divide-and-conquer</strong> instead so that each process in a parallelized approach only creates a partial result which will be combined with other partial results later. He argues for <strong>MapReduce in the small</strong> in addition to MapReduce in the large. I think this makes a lot of sense. That way, the partial results are created in the map phase on a number of threads (potentially on many machines) and the reduction is where the partial results are combined into a final result.</p>

<p>I had been thinking along these lines for a while already when thought about moving parts of the computation in BirdWatch for previous tweets (wordcount, retweet count, reach,&#8230;) to the server side as the current approach uses way more network bandwidth than strictly necessary. I was mostly thinking about it in terms of <strong>mergeability between partial results</strong>, which implies that the merge operation between two partial results is both <strong>associative</strong> and <strong>commutative</strong>.</p>

<p>To explain <strong>associative</strong>, let&#8217;s say we have partial results A, B, C, D and we can merge them in any way we want, for example (A + B) + C + D or A + (B+ (C + D)) or whatever. As another example, let&#8217;s say you have a script with 100 pages in 10 stacks. It doesn&#8217;t matter in which way we build intermediate piles as long as we only merge neighboring piles so that the pile with the higher page count goes under the one with the lower page count.</p>

<p><strong>Commutative</strong> means that order does not matter. For example, these are all the same: 11 + 5 + 16 + 10 and 10 + 16 + 5 + 11 are the same - both add up to 42.</p>

<p>After listening to Guy Steele&#8217;s talk and proof-reading the <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Steele_Guy/ParallelProg.md">transcript</a></strong>, I don&#8217;t want to push the redesign any further but instead tackle it right away. I think it should be possible to divide the aggregation tasks in BirdWatch in smaller chunks that can then be combined in an associative and commutative way on the client (in ClojureScript), and I have an idea of how to do that. But let me get back into the hammock<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> and ponder that idea some more. I&#8217;ll certainly let you know what I come up with.</p>

<h2>Update to OS X Yosemite</h2>

<p>Last weekend I updated my production laptop to Yosemite. Of course, I did a full backup with <strong><a href="http://bombich.com">Carbon Copy Cloner</a></strong> first and I also made sure that my old backup laptop was still working before I embarked on the update adventure, just in case. That turned out to be a good idea.</p>

<p>The system upgrade did not cause any actual trouble, all went smoothly and I also think that the new design looks great. <strong>BUT IT TOOK FOREVER</strong>. The time estimation was so off, it was worse than the worst Windows installation experiences ever. Overall it probably took <strong>six or seven hours</strong>. Apparently, this had to do with <strong><a href="http://brew.sh">homebrew</a></strong>, check out <strong><a href="http://blog.pythonaro.com/2014/10/read-this-before-you-upgrade-to-osx.html">this article</a></strong> for more information<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>Luckily I had read about the upgrade taking longer in a forum somewhere, so I wasn&#8217;t too worried and just let the installer do its thing. If you plan on doing the upgrade, I think it will be worth it, but <strong>only</strong> do it when you don&#8217;t need your machine for a while, like overnight (or you follow the instructions in the article above). All works nicely on my machine now as well, even without doing anything special, just with the consequence of giving me a free afternoon because of not being able to get any work done.</p>

<p>Also, you can press <strong>CMD-l</strong> to get a console output, which I found much more reassuring than having the installer tell me it&#8217;ll need another 2 minutes that turn into 2 hours.</p>

<h2>Conclusion</h2>

<p>Okay, that&#8217;s it for today. There are some additions to the <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure Resources</a></strong> project and I have also added links to the talk transcripts in there. Please check out the <strong><a href="https://github.com/matthiasn/talk-transcripts">talk-transcripts</a></strong> if you haven&#8217;t done so already. I would love to hear from you if any of these transcripts helped you at all and made the content more accessible than it would have been otherwise.</p>

<p>Until next week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you&rsquo;ve never listened to Rich Hickey&rsquo;s talk about <strong>Hammock-driven development</strong>, you really should. Now there&rsquo;s also a <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/HammockDrivenDev.md">transcript for that talk</a></strong>. You find the link to the video recording alongside the transcript.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Thanks to <strong><a href="https://twitter.com/RobStuttaford">@RobStuttaford</a></strong> for pointing this out.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk Transcripts: Rich Hickey, David Nolen & more]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/15/talk-transcripts/"/>
    <updated>2014-10-15T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/15/talk-transcripts</id>
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> I wanted to study the content of some talks in written form but there were no transcripts available. However, I believe that the valuable and relevant content of these talks should be accessible to everyone, including those for whom &#8216;sit back and listen&#8217; might not be the most viable option. To make that a reality, I had transcripts made. So far, I have compiled five talks by <strong>Rich Hickey</strong>, one talk by <strong>David Nolen</strong> and another talk by <strong>Guy Steele</strong>. The transcripts are <strong><a href="https://github.com/matthiasn/talk-transcripts">available on GitHub</a></strong>.</p>

<!-- more -->


<h2>Background</h2>

<p>For my <strong><a href="http://matthiasnehlsen.com/blog/2014/10/06/Building-Systems-in-Clojure-2/">previous article</a></strong>, I listened to Rich Hickey&#8217;s <strong><a href="https://www.youtube.com/watch?v=6mTbuzafcII">talk about Transducers</a></strong> a few times and each time I discovered something new, which made me wonder about my perception. After thinking about it for a little while, I noticed a pattern.</p>

<p>My retention rate when reading thoroughly (that is, with a marker and a pen on real paper) is MUCH higher than when listening to a talk. Listening to a talk repeatedly is like skimming a text repeatedly, it just does not yield the same result as reading thoroughly. My theory is that talks are pretty much always too fast or too slow at any given point in time. Something is either all new with background information mentioned that I would want to read about first or I already know what is being talked about. The danger for me lies in the latter. My mind tends to wander off, particularly when watching the recording of a talk, and my thoughts tend to be so engaging that I miss crucial information in the talk.</p>

<p>There&#8217;s really not a lot the presenter can do about that. Listening to a talk is valuable in its own right as it conveys emotion and can be quite entertaining and enlightening. I just feel it is not ideal when a lot of crucial information is only made available through a talk.</p>

<p>But there&#8217;s one thing that would help me immensely: a <strong>transcript</strong> of the talk. With that, I’d watch the talk once and then mark the sections in the transcript I want to read up upon, probably with a good old marker. That way, it should be next to impossible to miss something. In my case at least, my marker hardly ever misses anything, and whenever my thoughts go elsewhere, it is very easy to mark where I stopped in the document and go back there later.</p>

<p>But transcripts of the talks I was interested in just weren&#8217;t available. Which makes me wonder what you do when you&#8217;re a software engineer AND deaf. In the <strong><a href="https://www.youtube.com/watch?v=6mTbuzafcII">Transducers talk</a></strong> in particular, there was plenty of information that I hadn&#8217;t come across anywhere else. I don&#8217;t think we as a community should exclude people just because of their inability to hear. In other words, in think these transcripts should really be available.</p>

<p>Now, I like solutions rather than problems so I hired freelancers to transcribe some talks for me. I then did the proofreading and put the transcripts on <strong><a href="https://github.com/matthiasn/talk-transcripts">GitHub</a></strong>. From a financial standpoint, I thought that I&#8217;d do an experiment: I was prepared to spend up as much for transcripts as I typically spend on a conference. With seven talks already transcribed, I still spent 50% less than I would have been willing to spend. Moreover, because I proofread the transcripts, I have already learned more than what I’d say I learn at the average conference. So for me this is a huge win already, and it would make me happy if the outcome of this project benefitted others too.</p>

<p>Cheers,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure 2 - Transducers]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/06/Building-Systems-in-Clojure-2/"/>
    <updated>2014-10-06T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/06/Building-Systems-in-Clojure-2</id>
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> This article covers the usage of <strong>Transducers</strong> in Clojure, spiced up with some <strong>core.async</strong>. Here&#8217;s an animation that shows the information flow of the <strong>composed transducer</strong> that we are going to build in this article:</p>

<script language="javascript" type="text/javascript">
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
    obj.style.width = obj.contentWindow.document.body.scrollWidth + 'px';
  }
</script>


<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/clj-system2/index.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>




<br/>


<br/>


<p>If any of that is of interest to you at all (or if you want to see more animations like the one above), you may want to <strong>read</strong> the following article.</p>

<!-- more -->


<p>Hello and welcome back to this series of articles about building a system in <strong><a href="http://clojure.org/">Clojure</a></strong>. The other week, we had a first look at dependency injection using the <strong><a href="https://github.com/stuartsierra/component">component library</a></strong> combined with a hint of channel decoupling power. You may want to read <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">that article first</a></strong> if you haven’t done so already.</p>

<p>In this installment, we will look into the first component, the <strong>twitter client</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It seems like the natural component to start with as it is our application’s point of entry for Twitter’s <strong><a href="https://dev.twitter.com/streaming/overview">streaming data</a></strong>. We will have to discuss the lifecycle of the component at some point, but that can also happen next week. Today, we will look at transducers, a <strong><a href="http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming">recent addition</a></strong> to Clojure. First of all, though, we will look at the problem at hand, without any language- or library-specific implementation details.</p>

<h2>Twitter Client</h2>

<p>Let’s start in <strong><a href="https://www.youtube.com/watch?v=f84n5oFoZBc">hammock mode</a></strong>, without code. What is the problem we are trying to solve? It all starts with the tweet stream from the Twitter API. Very briefly, the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> allows us to subscribe to a (near) real time stream of tweets that contain one or more terms out of a set of terms. In the live instance under <strong><a href="http://birdwatch2.matthiasnehlsen.com/#*">http://birdwatch2.matthiasnehlsen.com</a></strong> these terms at the moment happen to be &#8220;Ferguson&#8221;, &#8220;ISIS&#8221;, and &#8220;Ebola&#8221; - I am interested in all these topics. As long as that subscription does not hit a hard ceiling of <strong>1%</strong> of all the tweets flowing through twitter’s system, we can be sure that we will retrieve all of them. Otherwise the stream will be throttled to a maximum of <strong>1%</strong> of what is tweeted at any moment in time. <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Here is how that stream looks like when each chunk is simply printed to the console:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/streaming-api.gif" title="animated gif of streaming API output" alt="animated gif of streaming API output"></p>

<p>For reasons unbeknownst to me, tweets stopped respecting the chunk borders for the last half year. Instead, tweets occasionally span two or three chunks. This makes processing the tweets a little more complicated than we might wish for. One tweet per chunk is straightforward:</p>

<pre><code>Receive chunk -&gt; parse JSON into map -&gt; put on conveyor belt (channel)
</code></pre>

<p>That looks like functional programming, right? No state to be kept anywhere, just functions producing results that are passed into other functions. But as desirable as that sounds, it does not align with reality. Instead, we need logical reasoning and state. What is the instruction we would give a sentient being? Imagine an intelligent agent standing between two conveyor belts. Imagine that agent being you. Here we go:</p>

<p>“On your left side, there’s a conveyor belt that keeps delivering hundred dollar bills. Put all of them on the other conveyor belt. Some of them come out cut into multiple pieces. These fragments are in correct order. Scotch tape is over there.”</p>

<p>I think we would all know what to do. There is a space where you park fragments of not-yet-complete bills / tweets. Then, with every new fragment, you inspect if the bill is complete and if so, put it back together and pass it on. Let’s try that in code. First, we will need to introduce <strong>transducers</strong> though.</p>

<h2>Transducers</h2>

<blockquote><p>Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts, and they&#8217;re coming to Clojure core and core.async.</p><footer><strong>Rich Hickey</strong> <cite><a href='http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming'>Cognitect Blog, August 6, 2014</a></cite></footer></blockquote>


<p>In a way, a transducer is the <strong>essence</strong> of a computation over data, without being bound to any kind of collection or data structure. Above, before we had to concern ourselves with the incomplete fragments, there was one step of the computation that we could <strong>model as a transducer</strong>: the part where we wanted to parse JSON into a map data structure.</p>

<p>Imagine we wanted to transform a vector of JSON strings into a vector of such parsed maps. We could simply do this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the above is bound to the data structure, in this case a vector. That should not have to be the case, though. Rich Hickey provides a good example in his <strong><a href="https://www.youtube.com/watch?v=6mTbuzafcII">transducers talk</a></strong>, likening the above to having to tell the guys processing luggage at the airport the same instructions twice, once for trolleys and again for conveyor belts, where in reality that should not matter.</p>

<p>We could, for example, not only run the mapping function over every item in a vector but also reuse the same function on every item in a channel, stream or whatever.</p>

<p>With Clojure 1.7, we can now create such a transducing function by simply leaving out the data structure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">xform</span> <span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can apply this transducing function to different kinds of data structures that are transducible processes. For example, we could transform all entries from a vector into another vector, like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">into </span><span class="p">[]</span> <span class="nv">xform</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or into a sequence, like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">sequence</span> <span class="nv">xform</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>It may not look terribly useful so far. But this can also be applied to a channel. Say, we want to create a channel that accepts JSON strings and transforms each message into a Clojure map. Simple:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">chan</span> <span class="mi">1</span> <span class="nv">xform</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above creates a channel with a buffer size of one that applies the transducer to every element.</p>

<p>But this does not help in our initial case here, where we know that some of the chunks are not complete but instead have to be glued together with the next one or two pieces. For that, we will need some kind of <strong>state</strong>. In the example above, that would be the space where we place fragments of a hundred dollar bill. But what if we want to see this aggregation process as a <strong>black box</strong>? Then, the aggregation cannot really have outside state. Also, as Rich Hickey mentioned in his StrangeLoop talk, there is no space in the machinery to keep state. What if one such transducer could have local state even if that is contained and not accessible from the outside? It turns out this is where stateful transducers can help.</p>

<p>Here’s how that looks like in code:</p>

<figure class='code'><figcaption><span>stateful streaming-buffer transducer</span><a href='https://github.com/matthiasn/BirdWatch/blob/f39a5692e4733784124d0f0930202d4270762d77/Clojure-Websockets/src/clj/birdwatch/twitterclient/processing.clj'>processing.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">streaming-buffer</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">step</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">buff</span> <span class="p">(</span><span class="nf">atom</span> <span class="s">&quot;&quot;</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">fn</span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span> <span class="nv">x</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">json-lines</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">str </span><span class="o">@</span><span class="nv">buff</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">insert-newline</span><span class="p">)</span> <span class="p">(</span><span class="nf">str/split-lines</span><span class="p">))</span>
</span><span class='line'>               <span class="nv">to-process</span> <span class="p">(</span><span class="nb">butlast </span><span class="nv">json-lines</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">reset!</span> <span class="nv">buff</span> <span class="p">(</span><span class="nb">last </span><span class="nv">json-lines</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="k">if </span><span class="nv">to-process</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">step</span> <span class="nv">r</span> <span class="nv">to-process</span><span class="p">)</span> <span class="nv">r</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go through this line by line. We have a (private) function named <strong>streaming-buffer</strong> that does not take any arguments. It returns a function that accepts the step function. This step function is the function that will be applied to every step from then on. This function then first creates the local state as an atom<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> which we will use as a buffer to store incomplete tweet fragments. It is worth noting that we don&#8217;t have to use <strong>atoms</strong> here if we want to squeeze out the last bit of performance, but I find it easier not to introduce yet another concept unless absoletely necessary<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>. Next, this function returns another function which accepts two parameters, r for result and x for the current data item (in this case the - potentially incomplete - chunk).</p>

<p>In the first line of the let binding, we use the <strong><a href="http://clojuredocs.org/clojure.core/-%3E">-> (thread-first)</a></strong> macro. This macro makes the code more legible by simply passing the result of each function call as the first argument of the next function. Here, specifically, we <strong>1)</strong> concatenate the buffer with the new chunk, <strong>2)</strong> add newlines where missing<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>, and <strong>3)</strong> split the string into a sequence on the line breaks.</p>

<p>Now, we cannot immediately process all those items in the resulting sequence. We know that all are complete except for the last one as otherwise there would not have been a subsequent tweet. But the last one may not be complete. Accordingly, we derive</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">butlast </span><span class="nv">json-lines</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>under the name <strong>to-process</strong>. Then, we reset the buffer to whatever is in that last string:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">buff</span> <span class="p">(</span><span class="nb">last </span><span class="nv">json-lines</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we have <strong>reduce</strong> call the <strong>step</strong> function for every item in <strong>to-process</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">if </span><span class="nv">to-process</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">step</span> <span class="nv">r</span> <span class="nv">to-process</span><span class="p">)</span> <span class="nv">r</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That way, only complete JSON strings are pushed down to the next operation, whereas intermediate JSON string fragments are kept locally and not passed on until certainly complete. That&#8217;s all that was needed to make the tweets whole again. Next, we compose this with the JSON parsing transducer we have already met above so that this <strong>streaming-buffer</strong> transducer runs first and passes its result to the <strong>JSON parser</strong>.</p>

<p>Let&#8217;s create a vector of JSON fragments and try it out. We have already established that transducers can be used on different data structures, it therefore should work equally well on a vector. Here&#8217;s the vector for the test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;&quot;</span> <span class="s">&quot;:1}\n{\&quot;bar\&quot;:&quot;</span> <span class="s">&quot;42}&quot;</span> <span class="s">&quot;{\&quot;baz\&quot;:42}&quot;</span> <span class="s">&quot;{\&quot;bla\&quot;:42}&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can check on the REPL if this will produce three complete JSON strings. It is expected here that the last one is lost because we would only check its completeness once there is a following tweet<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>. Once the collection to process is empty, the <strong>arity-1</strong> (single argument) function is called one last time, which really only returns the aggregate at that point:</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;

birdwatch.twitterclient.processing=&gt; (def chunks ["{\"foo\"" ":1}\n{\"bar\":" "42}" "{\"baz\":42}" "{\"bla\":42}"])
#'birdwatch.twitterclient.processing/chunks

birdwatch.twitterclient.processing=&gt; (into [] (streaming-buffer) chunks)
["{\"foo\":1}" "{\"bar\":42}" "{\"baz\":42}"]
</code></pre>

<p>What somewhat confused me at first is what the step function actually was. Let&#8217;s find out by printing it when the arity-1 function is called. We can modify the fourth line of <strong>stream-buffer</strong> like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>      <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="nv">step</span><span class="p">)</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we run the same as above on the REPL, we can see what the step function actually is:</p>

<pre><code>birdwatch.twitterclient.processing=&gt; (into [] (streaming-buffer) chunks)
#&lt;core$conj_BANG_ clojure.core$conj_BANG_@5fd837a&gt;
["{\"foo\":1}" "{\"bar\":42}" "{\"baz\":42}"]
</code></pre>

<p>Interestingly, the step function is <strong>conj!</strong> which according to the <strong><a href="https://github.com/clojure/clojure/blob/clojure-1.7.0-alpha2/src/clj/clojure/core.clj#L3208">source</a></strong> adds <strong>x</strong> to a <strong>transient collection</strong><sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>.</p>

<p>The step function is different when we use the transducer on a channel, but more about that when we use it in that scenario.</p>

<p>There&#8217;s more to do before we can <strong>compose all transducers</strong> and attach them to the appropriate channel. Specifically, we can receive valid JSON from Twitter, which is not a tweet. This happens, for example, when we get a notification that we lag behind in consuming the stream. In that case we only want to pass on the parsed map if it is likely that it was a tweet and otherwise log it as an error. There is one <strong>key</strong> that all tweets have in common, which does not seem to appear in any status messages from Twitter: <strong>:text</strong>. We can thus use that key as the <strong>predicate</strong> for recognizing a tweet:</p>

<figure class='code'><figcaption><span>tweet? predicate function</span><a href='https://github.com/matthiasn/BirdWatch/blob/f39a5692e4733784124d0f0930202d4270762d77/Clojure-Websockets/src/clj/birdwatch/twitterclient/processing.clj'>processing.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">tweet?</span> <span class="p">[</span><span class="nv">data</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Checks if data is a tweet. If so, pass on, otherwise log error.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">text</span> <span class="p">(</span><span class="ss">:text</span> <span class="nv">data</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when-not </span><span class="nv">text</span> <span class="p">(</span><span class="nf">log/error</span> <span class="s">&quot;error-msg&quot;</span> <span class="nv">data</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">text</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we also want to log the count of tweets received since the application started. Let&#8217;s do this only for full thousands. We will need some kind of counter to keep track of the count. Let&#8217;s create another <strong>stateful transducer</strong>:</p>

<figure class='code'><figcaption><span>stateful count transducer</span><a href='https://github.com/matthiasn/BirdWatch/blob/f39a5692e4733784124d0f0930202d4270762d77/Clojure-Websockets/src/clj/birdwatch/twitterclient/processing.clj'>processing.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">log-count</span> <span class="p">[</span><span class="nv">last-received</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Stateful transducer, counts processed items and updating last-received atom. Logs progress every 1000 items.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">step</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cnt</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">fn </span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span> <span class="nv">x</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">swap!</span> <span class="nv">cnt</span> <span class="nv">inc</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="o">@</span><span class="nv">cnt</span> <span class="mi">1000</span><span class="p">))</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;processed&quot;</span> <span class="o">@</span><span class="nv">cnt</span> <span class="s">&quot;since startup&quot;</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">reset!</span> <span class="nv">last-received</span> <span class="p">(</span><span class="nf">t/now</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span> <span class="nv">x</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This transducer is comparable to the one we saw earlier, except that the local atom now holds the count. Initially, the counter is incremented and then, when the counter is divisible by 1000, the count is logged. In addition, this function also resets the <strong>last-received</strong> timestamp. Of course, this could be factored out into a separate function, but I think this will do.</p>

<p>Now, we can compose all these steps:</p>

<figure class='code'><figcaption><span>composed transducer</span><a href='https://github.com/matthiasn/BirdWatch/blob/f39a5692e4733784124d0f0930202d4270762d77/Clojure-Websockets/src/clj/birdwatch/twitterclient/processing.clj'>processing.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">process-chunk</span> <span class="p">[</span><span class="nv">last-received</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Creates composite transducer for processing tweet chunks. Last-received atom passed in for updates.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">comp</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">streaming-buffer</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">filter </span><span class="nv">tweet?</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">log-count</span> <span class="nv">last-received</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above creates a composed function that takes the timestamp atom provided by the TwitterClient component as an argument. We can now use this <strong>transducing function</strong> and apply it to different data structures. Here, we use it to create a channel that takes tweet chunk fragments and delivers parsed tweets on the other side of the conveyor belt.</p>

<p>Let&#8217;s try the composed transducer on a vector to see what&#8217;s happening. For that, we create a vector with two JSON strings that contain the <strong>:text</strong> property and two that don&#8217;t.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="s">&quot;{\&quot;text\&quot;&quot;</span> <span class="s">&quot;:\&quot;foo\&quot;}\n{\&quot;text\&quot;:&quot;</span> <span class="s">&quot;\&quot;bar\&quot;}&quot;</span> <span class="s">&quot;{\&quot;baz\&quot;:42}&quot;</span> <span class="s">&quot;{\&quot;bla\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we should see that the invalid one is logged and the other two are returned (the final one at that point still in the buffer):</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;

birdwatch.twitterclient.processing=&gt; (def chunks ["{\"text\"" ":\"foo\"}\n{\"text\":" "\"bar\"}" "{\"baz\":42}" "{\"bla\":42}"])
#'birdwatch.twitterclient.processing/chunks

birdwatch.twitterclient.processing=&gt; (into [] (process-chunk (atom (t/epoch))) chunks)
20:57:39.999 [nREPL-worker-1] ERROR birdwatch.twitterclient.processing - error-msg {:baz 42}
[{:text "foo"} {:text "bar"}]
</code></pre>

<p>Great, we have a composed transducer that works on vectors as expected. According to Rich Hickey this should work equally well on channels. But let&#8217;s not take his word for it and instead try it out. First, here&#8217;s my attempt to visualize the usage of a transducer in a channel. To make things easier, no errors occur.</p>

<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/clj-system2/channel.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>


<p>Now for a simple example in the REPL:</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;

birdwatch.twitterclient.processing=&gt; (def chunks ["{\"text\"" ":\"foo\"}\r\n{\"text\":" "\"bar\"}" "{\"baz\":42}" "{\"bla\":42}"])
#'birdwatch.twitterclient.processing/chunks

birdwatch.twitterclient.processing=&gt; (require '[clojure.core.async :as async :refer [chan go-loop &lt;! put!]])
nil

birdwatch.twitterclient.processing=&gt; (def c (chan 1 (process-chunk (atom (t/now)))))
#'birdwatch.twitterclient.processing/c

birdwatch.twitterclient.processing=&gt; (go-loop [] (println (&lt;! c)) (recur))
#&lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@2f924b3f&gt;

birdwatch.twitterclient.processing=&gt; (put! c (chunks 0))
birdwatch.twitterclient.processing=&gt; (put! c (chunks 1))
{:text foo}

birdwatch.twitterclient.processing=&gt; (put! c (chunks 2))
birdwatch.twitterclient.processing=&gt; (put! c (chunks 3))
{:text bar}

birdwatch.twitterclient.processing=&gt; (put! c (chunks 4))
16:44:32.539 [nREPL-worker-2] ERROR birdwatch.twitterclient.processing - error-msg {:baz 42}
</code></pre>

<p>Excellent, same output. In case you&#8217;re not familiar with <strong>core.async channels</strong> yet: above we created a channel with the same transducer attached as in the previous example, then we created a <strong>go-loop</strong> to consume the channel and finally, we <strong>put!</strong> the individual chunks on the channel. No worries if this seems a little much right now. Just come back for the next articles where we&#8217;ll cover this topic in much more detail.</p>

<h2>Conclusion</h2>

<p>Okay, this is it for today. We saw how we can process tweets from the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a></strong> in a way that is generic and that can be used on different kinds of data structures. Next week, we will use this composed transducer in the context of our application. Then, we will process real data from the Twitter streaming API and feed the processed data into the channels architecture of our application. There is a <strong><a href="http://birdwatch2.matthiasnehlsen.com">live version for you to try out</a></strong> and of course the source code is on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>.</p>

<p>There is a lot more reading material available on the subjects we covered. Instead of providing all the links now, I&#8217;d rather refer you to my list of <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure Resources on GitHub</a></strong>. There, you&#8217;ll find a comprehensive list of all the articles I came across while working on this application.
I hope you found this useful. If you did, why don’t you subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> so I can tell you when the next article is out?</p>

<p>Cheers,
Matthias</p>

<p><strong>P.S.</strong> This series of articles is now continued in this book:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>




<div class="sharing">
  <iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" src="http://platform.twitter.com/widgets/tweet_button.2df3b13213b70e6d91180bf64c17db20.en.html#_=1412769297267&amp;count=horizontal&amp;counturl=http%3A%2F%2Fmatthiasnehlsen.com%2Fblog%2F2014%2F10%2F06%2FBuilding-Systems-in-Clojure-2%2F&amp;id=twitter-widget-0&amp;lang=en&amp;original_referer=http%3A%2F%2Fmatthiasnehlsen.com%2Fblog%2F2014%2F10%2F06%2FBuilding-Systems-in-Clojure-2%2F&amp;size=m&amp;text=Building%20a%20System%20in%20%23Clojure%202%20-%20Transducers%20-%20Matthias%20Nehlsen&amp;url=http%3A%2F%2Fmatthiasnehlsen.com%2Fblog%2F2014%2F10%2F06%2FBuilding-Systems-in-Clojure-2%2F&amp;via=matthiasnehlsen" class="twitter-share-button twitter-tweet-button twitter-share-button twitter-count-horizontal" title="Twitter Tweet Button" data-twttr-rendered="true" style="width: 107px; height: 20px;"></iframe>

  <div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background-color: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 90px; height: 20px; background-position: initial initial; background-repeat: initial initial;"><iframe frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" tabindex="0" vspace="0" width="100%" id="I0_1412769297421" name="I0_1412769297421" src="https://apis.google.com/u/0/se/0/_/+1/fastbutton?usegapi=1&amp;size=medium&amp;origin=http%3A%2F%2Fmatthiasnehlsen.com&amp;url=http%3A%2F%2Fmatthiasnehlsen.com%2Fblog%2F2014%2F10%2F06%2FBuilding-Systems-in-Clojure-2&amp;gsrc=3p&amp;ic=1&amp;jsh=m%3B%2F_%2Fscs%2Fapps-static%2F_%2Fjs%2Fk%3Doz.gapi.en.eZie-eg_6M4.O%2Fm%3D__features__%2Fam%3DAQ%2Frt%3Dj%2Fd%3D1%2Ft%3Dzcms%2Frs%3DAItRSTOh4SCUosWCqh1KPQ0Sr-K9eQ0Nsg#_methods=onPlusOne%2C_ready%2C_close%2C_open%2C_resizeMe%2C_renderstart%2Concircled%2Cdrefresh%2Cerefresh%2Conload&amp;id=I0_1412769297421&amp;parent=http%3A%2F%2Fmatthiasnehlsen.com&amp;pfname=&amp;rpctoken=39213785" data-gapiattached="true" title="+1"></iframe></div>

  <script type="text/javascript">
    (function() {
      var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true;
      script.src = 'https://apis.google.com/js/plusone.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(script, s);
    })();
  </script>

  <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = 'http://platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script>
</div>




<br>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I only recently started with Clojure. It may be possible an also quite likely that there are better ways of doing things. If so, please let me know, I want to learn stuff.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I don&rsquo;t know much about the exact mechanism at play, actual numbers or delivery guarantees. It anyhow doesn’t matter much for the purpose of this application. The interesting views focus on the most retweeted tweets. Now every retweet contains the original tweet under “retweeted_status”, with the current numbers such as retweet and favorite count for the moment in time it was retweeted. For popular ones, we thus receive the original tweet many, many times over. So even if we missed as much as half of all the tweets &ndash; which I consider unlikely &ndash; the popular tweets would only be updated less often. Worst case: retweet count is off by one or two. I can live with that. In reality, for the current selection of terms, reaching the limit also hardly ever happens. After all, 1% is still millions of tweets per day.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><strong>Atoms</strong> are essential to Clojure’s <strong>state model</strong>. Essentially, you have this managed reference that is thread-safe. Whenever we dereference such an atom, we get the state of the world this very second. Then, when you pass the dereferenced value to other parts of the application, it still represents the immutable state of the world at that point in time. It cannot change. Next time I dereference that atom, I will get the new state of the world. Updates to atoms can only happen in transactions, meaning that no two can run at the same time. Thus, we won&rsquo;t have to chase crazy concurrency issues.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>After initial experimentation with a <strong><a href="http://dev.clojure.org/jira/browse/CLJ-1512">local volatile reference</a></strong>, I decided in favor of a good old atom. The <strong>volatile!</strong> local reference trades off potential race conditions with speed. But there’s no performance issue when we process tweet chunks a few hundred times a second utmost, so why bother and introduce a new concept? Worth to keep in mind, though, when performance is an issue.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>For whatever reason, the changed behavior of the streaming API also entails that not all tweets are followed by a line break, only most of them. A tiny helper function inserts those missing linebreaks where they are missing between two tweets: <code>(str/replace s #"\}\{" "}\r\n{"))</code>.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>One could probably check if the buffer contains a valid and complete JSON string when the arity-1 function is called, and if so, pass it on. Considering though that in this application we are interested in a stream that does not have an end, I omitted this step.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>I assume the <strong>transient</strong> collection is used for performance reasons.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Staging server for this blog]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/04/weekly-update/"/>
    <updated>2014-10-04T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/04/weekly-update</id>
    <content type="html"><![CDATA[<p>This weekly update is mostly about organizational issues with regard to publishing articles and getting feedback for unfinished articles.</p>

<!-- more -->


<p>The other day, I published the unfinished second article in the <strong>Writing a System in Clojure</strong> series to get some preliminary feedback but without announcing the article just yet. What I did not think about, though, was that RSS aggregators notice and pick up new content nonetheless, so that was a little less than perfect on my part.</p>

<p>Ideally, I should have a different way of publishing unfinished stuff in order to get feedback and then only have finalized articles on this blog.</p>

<p>So I came up with something different: a <strong>staging server</strong>. Just like I would want a test environment when developing an application, I also want a test environment for new articles. So I&#8217;ve removed the unfinished article from master for now and put the unfinished article here:</p>

<p><strong><a href="http://staging.matthiasnehlsen.com/">http://staging.matthiasnehlsen.com/</a></strong></p>

<p>The implementation of the staging server took some 5 minutes. All I had to do was clone the directory on the server, check out a different branch in the cloned directory, create a new DNS entry for <strong>staging.matthiasnehlsen.com</strong>, and modify the <strong>nginx</strong> configuration so that the staging URL points to that new directory.</p>

<p>I have already got very helpful feedback, so at least publishing the unfinished article was still it. Right now I am working on adding some animations to the new article. I expect to have everything completed by Monday. I will probably split the article in two as the current article is a little too long for my taste.</p>

<h2>Conclusion</h2>

<p>While this little modification is probably not terribly useful for you, I believe it will be much more convenient for my workflow. You can also check out the staging server to see new articles in the works. Just note that sharing links may or may not lead to <strong>404&#8217;s</strong> later on as there is no guarantee whatsoever that those links will last. They should end up in master, but they may well not.</p>

<p>That&#8217;s all for now. Have a great week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure 1 - Overview]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/"/>
    <updated>2014-09-24T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1</id>
    <content type="html"><![CDATA[<p>This is the first of <strong>n</strong> articles about building <strong>systems</strong> in <strong><a href="http://clojure.org/">Clojure</a></strong>. Clojure is a beautiful language and I have been fascinated from the first moment I laid eyes on it last summer. However, what remained a mystery to me for most of the time was how to build more complex systems. I started researching the options that would allow me to structure an arbitrarily complex application in a way that is <strong>easy to understand and maintain</strong>. Here is what I found.</p>

<!-- more -->


<p>As an example for such a system, we will be looking at the Clojure rewrite of an application I wrote last year: <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>. This application subscribes to the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> for all tweets that contain one or more terms out of a set of terms and makes the tweets searchable through storing them in ElasticSearch. A live version of the Clojure version of this application is available here: <strong><a href="http://birdwatch2.matthiasnehlsen.com/#*">http://birdwatch2.matthiasnehlsen.com</a></strong>.</p>

<p>In this first installment we will be looking at the basic architecture of the server side. Let&#8217;s start with an animation <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to demonstrate how components in the system get wired up when the application initializes before we go into details.</p>

<br/>




<script language="javascript" type="text/javascript">
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
    obj.style.width = obj.contentWindow.document.body.scrollWidth + 'px';
  }
</script>




<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/bw-anim/index.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>




<br/>


<br/>


<p>The architecture above is a huge improvement over the first version and was only possible thanks to Stuart Sierra&#8217;s <strong><a href="https://github.com/stuartsierra/component">component library</a></strong>. This new version has cleanly separated components with no dependencies between namespace at all (except, of course, in the main namespace that wires everything together). But the individual components don&#8217;t know anything about each other except for where the components in the animation touch each other. And even there, it is mostly just plain <strong><a href="https://github.com/clojure/core.async">core.async</a></strong> channels.</p>

<p>In the initial version that I wrote, where everything depended on everything, things were very different. Some people would call that &#8220;spaghetti code&#8221;, but I think that is not doing justice to spaghetti. Unlike bad code, I don&#8217;t mind touching spaghetti. I would rather liken bad code to hairballs, of the worst kind that is. Have you ever experienced the following: you are standing in the shower and the water doesn&#8217;t drain. You notice something in the sink, so you squat down to pull it out only to start screaming, &#8220;Oh my god, it&#8217;s a dead rat&#8221; a second later. I am referring to that kind of entangled hairball mess, nothing less. On top, you may even hit your head when you jump up in disgust.</p>

<p>This is where dependency injection comes in. Can we agree that we don&#8217;t like hairballs? Good. Usually, what we are trying to achieve is a so-called inversion of control, in which a component of the application knows that it will be injected something which implements a known interface at runtime. Then, no matter what the actual implementation is, it knows what methods it can call on that something because of the implemented interface.</p>

<p>Here, unlike in object-oriented dependency injection, things are a little different because we don&#8217;t really have objects. The components play the role of objects, but as a further way of decoupling, I wanted them to only communicate via <strong>core.async</strong> channels. Channels are a great abstraction. Rich Hickey likens them to conveyor belts onto which you put something without having to know at all what happens on the other side. We will have a more detailed look at the channels in the next article. For now, as an abstraction, we can think about the channel components (the flat ones connecting the components with the switchboard) as <strong>wiring harnesses</strong>, like the one that connects the electronics of your car to your engine. The only way to interface with a modern engine (that doesn&#8217;t have separate mechanical controls) is by connecting to this wiring harness and either send or receive information, depending on the channel / cable that you interface with.</p>

<p>Let&#8217;s have a look at how the initialization of the application we have already seen in the animation looks in code:</p>

<figure class='code'><figcaption><span>Main namespace</span><a href='https://github.com/matthiasn/BirdWatch/blob/a26c201d2cc2c89f4b3d2ecb8e6adb403e6f89c7/Clojure-Websockets/src/clj/birdwatch/main.clj'>main.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">birdwatch.main</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.twitter-client</span> <span class="ss">:as</span> <span class="nv">tc</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.communicator</span> <span class="ss">:as</span> <span class="nv">comm</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.persistence</span> <span class="ss">:as</span> <span class="nv">p</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.percolator</span> <span class="ss">:as</span> <span class="nv">perc</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.http</span> <span class="ss">:as</span> <span class="nv">http</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.switchboard</span> <span class="ss">:as</span> <span class="nv">sw</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clojure.edn</span> <span class="ss">:as</span> <span class="nv">edn</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clojure.tools.logging</span> <span class="ss">:as</span> <span class="nv">log</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clj-pid.core</span> <span class="ss">:as</span> <span class="nv">pid</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">com.stuartsierra.component</span> <span class="ss">:as</span> <span class="nv">component</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">conf</span> <span class="p">(</span><span class="nf">edn/read-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;twitterconf.edn&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-system</span> <span class="p">[</span><span class="nv">conf</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Create system by wiring individual components so that component/start</span>
</span><span class='line'><span class="s">  will bring up the individual components in the correct order.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">component/system-map</span>
</span><span class='line'>   <span class="ss">:communicator-channels</span> <span class="p">(</span><span class="nf">comm/new-communicator-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:communicator</span>  <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">comm/new-communicator</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:communicator-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:twitterclient-channels</span> <span class="p">(</span><span class="nf">tc/new-twitterclient-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:twitterclient</span> <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">tc/new-twitterclient</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:twitterclient-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:persistence-channels</span> <span class="p">(</span><span class="nf">p/new-persistence-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:persistence</span>   <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">p/new-persistence</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:persistence-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:percolation-channels</span> <span class="p">(</span><span class="nf">perc/new-percolation-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:percolator</span>    <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">perc/new-percolator</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:percolation-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:http</span>          <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">http/new-http-server</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:communicator</span> <span class="ss">:communicator</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:switchboard</span>   <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">sw/new-switchboard</span><span class="p">)</span> <span class="p">{</span><span class="ss">:comm-chans</span> <span class="ss">:communicator-channels</span>
</span><span class='line'>                                                         <span class="ss">:tc-chans</span> <span class="ss">:twitterclient-channels</span>
</span><span class='line'>                                                         <span class="ss">:pers-chans</span> <span class="ss">:persistence-channels</span>
</span><span class='line'>                                                         <span class="ss">:perc-chans</span> <span class="ss">:percolation-channels</span><span class="p">})))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">system</span> <span class="p">(</span><span class="nf">get-system</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/save</span> <span class="p">(</span><span class="ss">:pidfile-name</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/delete-on-shutdown!</span> <span class="p">(</span><span class="ss">:pidfile-name</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Application started, PID&quot;</span> <span class="p">(</span><span class="nf">pid/current</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">alter-var-root</span> <span class="o">#</span><span class="ss">&#39;system</span> <span class="nv">component/start</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I personally think this <strong>reads really well</strong>, even if you have never seen Clojure before in your life. Roughly the first half is concerned with imports and reading the configuration file. Next, we have the <code>get-system</code> function which declares, what components depend on what other components. The system is finally started in the <code>-main</code> function (plus the process ID logged and saved to a file). This is all there is to know about the application entry point.</p>

<p>Now, when we start the application, all the dependencies will be started in an order that the component library determines so that all dependencies are met. Here&#8217;s the output of that startup process:</p>

<pre><code>mn:Clojure-Websockets mn$ lein run
16:46:30.925 [main] INFO  birdwatch.main - Application started, PID 6682
16:46:30.937 [main] INFO  birdwatch.twitter-client - Starting Twitterclient Channels Component
16:46:30.939 [main] INFO  birdwatch.twitter-client - Starting Twitterclient Component
16:46:30.940 [main] INFO  birdwatch.twitter-client - Starting Twitter client.
16:46:31.323 [main] INFO  birdwatch.persistence - Starting Persistence Channels Component
16:46:31.324 [main] INFO  birdwatch.persistence - Starting Persistence Component
16:46:31.415 [main] INFO  org.elasticsearch.plugins - [Chameleon] loaded [], sites []
16:46:32.339 [main] INFO  birdwatch.communicator - Starting Communicator Channels Component
16:46:32.340 [main] INFO  birdwatch.communicator - Starting Communicator Component
16:46:32.355 [main] INFO  birdwatch.http - Starting HTTP Component
16:46:32.375 [main] INFO  birdwatch.http - Http-kit server is running at http://localhost:8888/
16:46:32.376 [main] INFO  birdwatch.percolator - Starting Percolation Channels Component
16:46:32.377 [main] INFO  birdwatch.percolator - Starting Percolator Component
16:46:32.380 [main] INFO  birdwatch.switchboard - Starting Switchboard Component
</code></pre>

<p>Next week, we will look at how these components wire a channel grid and how information flows through this grid. You do not have to wait to see more code though, everything is on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong> already.</p>

<p>Once we have discussed the architecture in detail over the next couple of weeks, we can start observing the system under load. Of course, it would be interesting to have actual user load. But with or without actual load, we want to find a way of how to generate / simulate load and then observe the system, identify the bottlenecks and remove them. For example, the clients could be simulated by connecting a load generator via ZeroMQ or the like and deliver matches back to that application and check if they are as expected (correct, complete, timely). The Twitter stream could also be simulated, for example by connecting to a load generator that either replays recorded tweets, with full control over the rate, or with artificial test cases, for which we could exactly specify the expectations on the output side.</p>

<p>That&#8217;s it for now. Would you like to be informed when the next article is out? Just <strong>sign up</strong> for the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>mailing list</strong></a> and I will let you know. Also, if you are interested in Clojure, you may want to check out my curated list of <strong><a href="https://github.com/matthiasn/Clojure-Resources">useful Clojure-related resources on GitHub</a></strong>.</p>

<p>Cheers,
Matthias</p>

<p><strong>P.S.</strong> This series of articles is now continued in this book:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In case you are interested in the animation as such, you can check out the current <strong><a href="http://matthiasnehlsen.com/blog/2014/09/23/weekly-update/">weekly review</a></strong> in which I provide some background information.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
